
LCD CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000016da  0000176e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800072  00800072  00001780  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f7e  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  000058b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001469  00000000  00000000  00006170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  000075dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e10  00000000  00000000  00007d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ba1  00000000  00000000  00008b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000c6b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__ctors_end>
       4:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
       8:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
       c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      10:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      14:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      18:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      1c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      20:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      24:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      28:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      2c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      30:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      34:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      38:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      3c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      40:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      44:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      48:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      4c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      50:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      54:	fd 08       	sbc	r15, r13
      56:	06 09       	sbc	r16, r6
      58:	06 09       	sbc	r16, r6
      5a:	06 09       	sbc	r16, r6
      5c:	06 09       	sbc	r16, r6
      5e:	06 09       	sbc	r16, r6
      60:	06 09       	sbc	r16, r6
      62:	06 09       	sbc	r16, r6
      64:	06 09       	sbc	r16, r6
      66:	06 09       	sbc	r16, r6
      68:	06 09       	sbc	r16, r6
      6a:	06 09       	sbc	r16, r6
      6c:	06 09       	sbc	r16, r6
      6e:	06 09       	sbc	r16, r6
      70:	06 09       	sbc	r16, r6
      72:	06 09       	sbc	r16, r6
      74:	06 09       	sbc	r16, r6
      76:	06 09       	sbc	r16, r6
      78:	06 09       	sbc	r16, r6
      7a:	06 09       	sbc	r16, r6
      7c:	06 09       	sbc	r16, r6
      7e:	06 09       	sbc	r16, r6
      80:	06 09       	sbc	r16, r6
      82:	06 09       	sbc	r16, r6
      84:	06 09       	sbc	r16, r6
      86:	06 09       	sbc	r16, r6
      88:	06 09       	sbc	r16, r6
      8a:	06 09       	sbc	r16, r6
      8c:	06 09       	sbc	r16, r6
      8e:	d6 08       	sbc	r13, r6
      90:	4c 08       	sbc	r4, r12
      92:	70 08       	sbc	r7, r0
      94:	06 09       	sbc	r16, r6
      96:	e6 08       	sbc	r14, r6
      98:	06 09       	sbc	r16, r6
      9a:	06 09       	sbc	r16, r6
      9c:	06 09       	sbc	r16, r6
      9e:	06 09       	sbc	r16, r6
      a0:	06 09       	sbc	r16, r6
      a2:	06 09       	sbc	r16, r6
      a4:	06 09       	sbc	r16, r6
      a6:	06 09       	sbc	r16, r6
      a8:	06 09       	sbc	r16, r6
      aa:	06 09       	sbc	r16, r6
      ac:	06 09       	sbc	r16, r6
      ae:	06 09       	sbc	r16, r6
      b0:	f2 08       	sbc	r15, r2
      b2:	06 09       	sbc	r16, r6
      b4:	9c 08       	sbc	r9, r12
      b6:	06 09       	sbc	r16, r6
      b8:	06 09       	sbc	r16, r6
      ba:	b8 08       	sbc	r11, r8
      bc:	06 09       	sbc	r16, r6
      be:	06 09       	sbc	r16, r6
      c0:	06 09       	sbc	r16, r6
      c2:	06 09       	sbc	r16, r6
      c4:	06 09       	sbc	r16, r6
      c6:	06 09       	sbc	r16, r6
      c8:	06 09       	sbc	r16, r6
      ca:	06 09       	sbc	r16, r6
      cc:	06 09       	sbc	r16, r6
      ce:	c6 08       	sbc	r12, r6
      d0:	4c 08       	sbc	r4, r12
      d2:	57 08       	sbc	r5, r7
      d4:	06 09       	sbc	r16, r6
      d6:	e6 08       	sbc	r14, r6
      d8:	06 09       	sbc	r16, r6
      da:	06 09       	sbc	r16, r6
      dc:	06 09       	sbc	r16, r6
      de:	06 09       	sbc	r16, r6
      e0:	06 09       	sbc	r16, r6
      e2:	06 09       	sbc	r16, r6
      e4:	06 09       	sbc	r16, r6
      e6:	06 09       	sbc	r16, r6
      e8:	06 09       	sbc	r16, r6
      ea:	06 09       	sbc	r16, r6
      ec:	06 09       	sbc	r16, r6
      ee:	06 09       	sbc	r16, r6
      f0:	f2 08       	sbc	r15, r2
      f2:	06 09       	sbc	r16, r6
      f4:	8e 08       	sbc	r8, r14
      f6:	06 09       	sbc	r16, r6
      f8:	06 09       	sbc	r16, r6
      fa:	aa 08       	sbc	r10, r10
      fc:	fd 08       	sbc	r15, r13
      fe:	06 09       	sbc	r16, r6
     100:	06 09       	sbc	r16, r6
     102:	06 09       	sbc	r16, r6
     104:	06 09       	sbc	r16, r6
     106:	06 09       	sbc	r16, r6
     108:	06 09       	sbc	r16, r6
     10a:	06 09       	sbc	r16, r6
     10c:	06 09       	sbc	r16, r6
     10e:	06 09       	sbc	r16, r6
     110:	06 09       	sbc	r16, r6
     112:	06 09       	sbc	r16, r6
     114:	06 09       	sbc	r16, r6
     116:	06 09       	sbc	r16, r6
     118:	06 09       	sbc	r16, r6
     11a:	06 09       	sbc	r16, r6
     11c:	06 09       	sbc	r16, r6
     11e:	06 09       	sbc	r16, r6
     120:	06 09       	sbc	r16, r6
     122:	06 09       	sbc	r16, r6
     124:	06 09       	sbc	r16, r6
     126:	06 09       	sbc	r16, r6
     128:	06 09       	sbc	r16, r6
     12a:	06 09       	sbc	r16, r6
     12c:	06 09       	sbc	r16, r6
     12e:	06 09       	sbc	r16, r6
     130:	06 09       	sbc	r16, r6
     132:	06 09       	sbc	r16, r6
     134:	06 09       	sbc	r16, r6
     136:	0f 09       	sbc	r16, r15
     138:	4c 08       	sbc	r4, r12
     13a:	6f 08       	sbc	r6, r15
     13c:	06 09       	sbc	r16, r6
     13e:	e6 08       	sbc	r14, r6
     140:	06 09       	sbc	r16, r6
     142:	06 09       	sbc	r16, r6
     144:	06 09       	sbc	r16, r6
     146:	06 09       	sbc	r16, r6
     148:	06 09       	sbc	r16, r6
     14a:	06 09       	sbc	r16, r6
     14c:	06 09       	sbc	r16, r6
     14e:	06 09       	sbc	r16, r6
     150:	06 09       	sbc	r16, r6
     152:	06 09       	sbc	r16, r6
     154:	06 09       	sbc	r16, r6
     156:	06 09       	sbc	r16, r6
     158:	f2 08       	sbc	r15, r2
     15a:	06 09       	sbc	r16, r6
     15c:	9b 08       	sbc	r9, r11
     15e:	06 09       	sbc	r16, r6
     160:	06 09       	sbc	r16, r6
     162:	b7 08       	sbc	r11, r7
     164:	06 09       	sbc	r16, r6
     166:	06 09       	sbc	r16, r6
     168:	06 09       	sbc	r16, r6
     16a:	06 09       	sbc	r16, r6
     16c:	06 09       	sbc	r16, r6
     16e:	06 09       	sbc	r16, r6
     170:	06 09       	sbc	r16, r6
     172:	06 09       	sbc	r16, r6
     174:	06 09       	sbc	r16, r6
     176:	c5 08       	sbc	r12, r5
     178:	4c 08       	sbc	r4, r12
     17a:	56 08       	sbc	r5, r6
     17c:	06 09       	sbc	r16, r6
     17e:	e6 08       	sbc	r14, r6
     180:	06 09       	sbc	r16, r6
     182:	06 09       	sbc	r16, r6
     184:	06 09       	sbc	r16, r6
     186:	06 09       	sbc	r16, r6
     188:	06 09       	sbc	r16, r6
     18a:	06 09       	sbc	r16, r6
     18c:	06 09       	sbc	r16, r6
     18e:	06 09       	sbc	r16, r6
     190:	06 09       	sbc	r16, r6
     192:	06 09       	sbc	r16, r6
     194:	06 09       	sbc	r16, r6
     196:	06 09       	sbc	r16, r6
     198:	f2 08       	sbc	r15, r2
     19a:	06 09       	sbc	r16, r6
     19c:	8d 08       	sbc	r8, r13
     19e:	06 09       	sbc	r16, r6
     1a0:	06 09       	sbc	r16, r6
     1a2:	a9 08       	sbc	r10, r9

000001a4 <__trampolines_end>:
     1a4:	4c 43       	sbci	r20, 0x3C	; 60
     1a6:	44 20       	and	r4, r4
     1a8:	54 45       	sbci	r21, 0x54	; 84
     1aa:	53 54       	subi	r21, 0x43	; 67
	...

000001ae <__ctors_start>:
     1ae:	a7 09       	sbc	r26, r7

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf e5       	ldi	r28, 0x5F	; 95
     1b6:	d8 e0       	ldi	r29, 0x08	; 8
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	10 e0       	ldi	r17, 0x00	; 0
     1be:	a0 e6       	ldi	r26, 0x60	; 96
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	ea ed       	ldi	r30, 0xDA	; 218
     1c4:	f6 e1       	ldi	r31, 0x16	; 22
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__do_copy_data+0x10>
     1c8:	05 90       	lpm	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	a2 37       	cpi	r26, 0x72	; 114
     1ce:	b1 07       	cpc	r27, r17
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <__do_copy_data+0xc>

000001d2 <__do_clear_bss>:
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	a2 e7       	ldi	r26, 0x72	; 114
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
     1dc:	a8 38       	cpi	r26, 0x88	; 136
     1de:	b2 07       	cpc	r27, r18
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>

000001e2 <__do_global_ctors>:
     1e2:	10 e0       	ldi	r17, 0x00	; 0
     1e4:	c8 ed       	ldi	r28, 0xD8	; 216
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
     1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <__do_global_ctors+0x10>
     1ea:	21 97       	sbiw	r28, 0x01	; 1
     1ec:	fe 01       	movw	r30, r28
     1ee:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__tablejump2__>
     1f2:	c7 3d       	cpi	r28, 0xD7	; 215
     1f4:	d1 07       	cpc	r29, r17
     1f6:	c9 f7       	brne	.-14     	; 0x1ea <__do_global_ctors+0x8>
     1f8:	0e 94 36 09 	call	0x126c	; 0x126c <main>
     1fc:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <_exit>

00000200 <__bad_interrupt>:
     200:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000204 <_ZN13Character_LCDC1Ev>:
		i--;
		BigNumber(k[i],x1,y);
		x1 = x1 + 4 ;
	}
	_delay_ms(1);
}
     204:	fc 01       	movw	r30, r24
     206:	9b e1       	ldi	r25, 0x1B	; 27
     208:	90 83       	st	Z, r25
     20a:	8a e1       	ldi	r24, 0x1A	; 26
     20c:	81 83       	std	Z+1, r24	; 0x01
     20e:	12 82       	std	Z+2, r1	; 0x02
     210:	93 83       	std	Z+3, r25	; 0x03
     212:	84 83       	std	Z+4, r24	; 0x04
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	25 83       	std	Z+5, r18	; 0x05
     218:	96 83       	std	Z+6, r25	; 0x06
     21a:	87 83       	std	Z+7, r24	; 0x07
     21c:	22 e0       	ldi	r18, 0x02	; 2
     21e:	20 87       	std	Z+8, r18	; 0x08
     220:	91 87       	std	Z+9, r25	; 0x09
     222:	82 87       	std	Z+10, r24	; 0x0a
     224:	23 e0       	ldi	r18, 0x03	; 3
     226:	23 87       	std	Z+11, r18	; 0x0b
     228:	94 87       	std	Z+12, r25	; 0x0c
     22a:	85 87       	std	Z+13, r24	; 0x0d
     22c:	24 e0       	ldi	r18, 0x04	; 4
     22e:	26 87       	std	Z+14, r18	; 0x0e
     230:	97 87       	std	Z+15, r25	; 0x0f
     232:	80 8b       	std	Z+16, r24	; 0x10
     234:	25 e0       	ldi	r18, 0x05	; 5
     236:	21 8b       	std	Z+17, r18	; 0x11
     238:	92 8b       	std	Z+18, r25	; 0x12
     23a:	83 8b       	std	Z+19, r24	; 0x13
     23c:	86 e0       	ldi	r24, 0x06	; 6
     23e:	84 8b       	std	Z+20, r24	; 0x14
     240:	08 95       	ret

00000242 <_ZN13Character_LCD8SendCharEh>:
     242:	fc 01       	movw	r30, r24
     244:	64 fd       	sbrc	r22, 4
     246:	12 c0       	rjmp	.+36     	; 0x26c <_ZN13Character_LCD8SendCharEh+0x2a>
     248:	a1 85       	ldd	r26, Z+9	; 0x09
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	90 96       	adiw	r26, 0x20	; 32
     24e:	2c 91       	ld	r18, X
     250:	90 97       	sbiw	r26, 0x20	; 32
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	03 84       	ldd	r0, Z+11	; 0x0b
     258:	02 c0       	rjmp	.+4      	; 0x25e <_ZN13Character_LCD8SendCharEh+0x1c>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <_ZN13Character_LCD8SendCharEh+0x18>
     262:	80 95       	com	r24
     264:	82 23       	and	r24, r18
     266:	90 96       	adiw	r26, 0x20	; 32
     268:	8c 93       	st	X, r24
     26a:	10 c0       	rjmp	.+32     	; 0x28c <_ZN13Character_LCD8SendCharEh+0x4a>
     26c:	a1 85       	ldd	r26, Z+9	; 0x09
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	90 96       	adiw	r26, 0x20	; 32
     272:	2c 91       	ld	r18, X
     274:	90 97       	sbiw	r26, 0x20	; 32
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	03 84       	ldd	r0, Z+11	; 0x0b
     27c:	02 c0       	rjmp	.+4      	; 0x282 <_ZN13Character_LCD8SendCharEh+0x40>
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	0a 94       	dec	r0
     284:	e2 f7       	brpl	.-8      	; 0x27e <_ZN13Character_LCD8SendCharEh+0x3c>
     286:	82 2b       	or	r24, r18
     288:	90 96       	adiw	r26, 0x20	; 32
     28a:	8c 93       	st	X, r24
     28c:	65 fd       	sbrc	r22, 5
     28e:	12 c0       	rjmp	.+36     	; 0x2b4 <_ZN13Character_LCD8SendCharEh+0x72>
     290:	a4 85       	ldd	r26, Z+12	; 0x0c
     292:	b0 e0       	ldi	r27, 0x00	; 0
     294:	90 96       	adiw	r26, 0x20	; 32
     296:	2c 91       	ld	r18, X
     298:	90 97       	sbiw	r26, 0x20	; 32
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	06 84       	ldd	r0, Z+14	; 0x0e
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_ZN13Character_LCD8SendCharEh+0x64>
     2a2:	88 0f       	add	r24, r24
     2a4:	99 1f       	adc	r25, r25
     2a6:	0a 94       	dec	r0
     2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <_ZN13Character_LCD8SendCharEh+0x60>
     2aa:	80 95       	com	r24
     2ac:	82 23       	and	r24, r18
     2ae:	90 96       	adiw	r26, 0x20	; 32
     2b0:	8c 93       	st	X, r24
     2b2:	10 c0       	rjmp	.+32     	; 0x2d4 <_ZN13Character_LCD8SendCharEh+0x92>
     2b4:	a4 85       	ldd	r26, Z+12	; 0x0c
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	90 96       	adiw	r26, 0x20	; 32
     2ba:	2c 91       	ld	r18, X
     2bc:	90 97       	sbiw	r26, 0x20	; 32
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	06 84       	ldd	r0, Z+14	; 0x0e
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <_ZN13Character_LCD8SendCharEh+0x88>
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	0a 94       	dec	r0
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <_ZN13Character_LCD8SendCharEh+0x84>
     2ce:	82 2b       	or	r24, r18
     2d0:	90 96       	adiw	r26, 0x20	; 32
     2d2:	8c 93       	st	X, r24
     2d4:	66 fd       	sbrc	r22, 6
     2d6:	12 c0       	rjmp	.+36     	; 0x2fc <_ZN13Character_LCD8SendCharEh+0xba>
     2d8:	a7 85       	ldd	r26, Z+15	; 0x0f
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	90 96       	adiw	r26, 0x20	; 32
     2de:	2c 91       	ld	r18, X
     2e0:	90 97       	sbiw	r26, 0x20	; 32
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	01 88       	ldd	r0, Z+17	; 0x11
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <_ZN13Character_LCD8SendCharEh+0xac>
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <_ZN13Character_LCD8SendCharEh+0xa8>
     2f2:	80 95       	com	r24
     2f4:	82 23       	and	r24, r18
     2f6:	90 96       	adiw	r26, 0x20	; 32
     2f8:	8c 93       	st	X, r24
     2fa:	10 c0       	rjmp	.+32     	; 0x31c <_ZN13Character_LCD8SendCharEh+0xda>
     2fc:	a7 85       	ldd	r26, Z+15	; 0x0f
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	90 96       	adiw	r26, 0x20	; 32
     302:	2c 91       	ld	r18, X
     304:	90 97       	sbiw	r26, 0x20	; 32
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	01 88       	ldd	r0, Z+17	; 0x11
     30c:	02 c0       	rjmp	.+4      	; 0x312 <_ZN13Character_LCD8SendCharEh+0xd0>
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	0a 94       	dec	r0
     314:	e2 f7       	brpl	.-8      	; 0x30e <_ZN13Character_LCD8SendCharEh+0xcc>
     316:	82 2b       	or	r24, r18
     318:	90 96       	adiw	r26, 0x20	; 32
     31a:	8c 93       	st	X, r24
     31c:	66 23       	and	r22, r22
     31e:	94 f0       	brlt	.+36     	; 0x344 <_ZN13Character_LCD8SendCharEh+0x102>
     320:	a2 89       	ldd	r26, Z+18	; 0x12
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	90 96       	adiw	r26, 0x20	; 32
     326:	2c 91       	ld	r18, X
     328:	90 97       	sbiw	r26, 0x20	; 32
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	04 88       	ldd	r0, Z+20	; 0x14
     330:	02 c0       	rjmp	.+4      	; 0x336 <_ZN13Character_LCD8SendCharEh+0xf4>
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	0a 94       	dec	r0
     338:	e2 f7       	brpl	.-8      	; 0x332 <_ZN13Character_LCD8SendCharEh+0xf0>
     33a:	80 95       	com	r24
     33c:	82 23       	and	r24, r18
     33e:	90 96       	adiw	r26, 0x20	; 32
     340:	8c 93       	st	X, r24
     342:	10 c0       	rjmp	.+32     	; 0x364 <_ZN13Character_LCD8SendCharEh+0x122>
     344:	a2 89       	ldd	r26, Z+18	; 0x12
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	90 96       	adiw	r26, 0x20	; 32
     34a:	2c 91       	ld	r18, X
     34c:	90 97       	sbiw	r26, 0x20	; 32
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	04 88       	ldd	r0, Z+20	; 0x14
     354:	02 c0       	rjmp	.+4      	; 0x35a <_ZN13Character_LCD8SendCharEh+0x118>
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	0a 94       	dec	r0
     35c:	e2 f7       	brpl	.-8      	; 0x356 <_ZN13Character_LCD8SendCharEh+0x114>
     35e:	82 2b       	or	r24, r18
     360:	90 96       	adiw	r26, 0x20	; 32
     362:	8c 93       	st	X, r24
     364:	a0 81       	ld	r26, Z
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	90 96       	adiw	r26, 0x20	; 32
     36a:	4c 91       	ld	r20, X
     36c:	90 97       	sbiw	r26, 0x20	; 32
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9c 01       	movw	r18, r24
     374:	02 80       	ldd	r0, Z+2	; 0x02
     376:	02 c0       	rjmp	.+4      	; 0x37c <_ZN13Character_LCD8SendCharEh+0x13a>
     378:	22 0f       	add	r18, r18
     37a:	33 1f       	adc	r19, r19
     37c:	0a 94       	dec	r0
     37e:	e2 f7       	brpl	.-8      	; 0x378 <_ZN13Character_LCD8SendCharEh+0x136>
     380:	24 2b       	or	r18, r20
     382:	90 96       	adiw	r26, 0x20	; 32
     384:	2c 93       	st	X, r18
     386:	a6 81       	ldd	r26, Z+6	; 0x06
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	90 96       	adiw	r26, 0x20	; 32
     38c:	4c 91       	ld	r20, X
     38e:	90 97       	sbiw	r26, 0x20	; 32
     390:	9c 01       	movw	r18, r24
     392:	00 84       	ldd	r0, Z+8	; 0x08
     394:	02 c0       	rjmp	.+4      	; 0x39a <_ZN13Character_LCD8SendCharEh+0x158>
     396:	22 0f       	add	r18, r18
     398:	33 1f       	adc	r19, r19
     39a:	0a 94       	dec	r0
     39c:	e2 f7       	brpl	.-8      	; 0x396 <_ZN13Character_LCD8SendCharEh+0x154>
     39e:	24 2b       	or	r18, r20
     3a0:	90 96       	adiw	r26, 0x20	; 32
     3a2:	2c 93       	st	X, r18
     3a4:	af ec       	ldi	r26, 0xCF	; 207
     3a6:	b7 e0       	ldi	r27, 0x07	; 7
     3a8:	11 97       	sbiw	r26, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <_ZN13Character_LCD8SendCharEh+0x166>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <_ZN13Character_LCD8SendCharEh+0x16c>
     3ae:	00 00       	nop
     3b0:	a6 81       	ldd	r26, Z+6	; 0x06
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	90 96       	adiw	r26, 0x20	; 32
     3b6:	3c 91       	ld	r19, X
     3b8:	90 97       	sbiw	r26, 0x20	; 32
     3ba:	ac 01       	movw	r20, r24
     3bc:	00 84       	ldd	r0, Z+8	; 0x08
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <_ZN13Character_LCD8SendCharEh+0x182>
     3c0:	44 0f       	add	r20, r20
     3c2:	55 1f       	adc	r21, r21
     3c4:	0a 94       	dec	r0
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <_ZN13Character_LCD8SendCharEh+0x17e>
     3c8:	24 2f       	mov	r18, r20
     3ca:	20 95       	com	r18
     3cc:	23 23       	and	r18, r19
     3ce:	90 96       	adiw	r26, 0x20	; 32
     3d0:	2c 93       	st	X, r18
     3d2:	a0 81       	ld	r26, Z
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	90 96       	adiw	r26, 0x20	; 32
     3d8:	2c 91       	ld	r18, X
     3da:	90 97       	sbiw	r26, 0x20	; 32
     3dc:	02 80       	ldd	r0, Z+2	; 0x02
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <_ZN13Character_LCD8SendCharEh+0x1a2>
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	0a 94       	dec	r0
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <_ZN13Character_LCD8SendCharEh+0x19e>
     3e8:	80 95       	com	r24
     3ea:	82 23       	and	r24, r18
     3ec:	90 96       	adiw	r26, 0x20	; 32
     3ee:	8c 93       	st	X, r24
     3f0:	8f ec       	ldi	r24, 0xCF	; 207
     3f2:	97 e0       	ldi	r25, 0x07	; 7
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <_ZN13Character_LCD8SendCharEh+0x1b2>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <_ZN13Character_LCD8SendCharEh+0x1b8>
     3fa:	00 00       	nop
     3fc:	60 fd       	sbrc	r22, 0
     3fe:	12 c0       	rjmp	.+36     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     400:	a1 85       	ldd	r26, Z+9	; 0x09
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	90 96       	adiw	r26, 0x20	; 32
     406:	2c 91       	ld	r18, X
     408:	90 97       	sbiw	r26, 0x20	; 32
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	03 84       	ldd	r0, Z+11	; 0x0b
     410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	0a 94       	dec	r0
     418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     41a:	80 95       	com	r24
     41c:	82 23       	and	r24, r18
     41e:	90 96       	adiw	r26, 0x20	; 32
     420:	8c 93       	st	X, r24
     422:	10 c0       	rjmp	.+32     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     424:	a1 85       	ldd	r26, Z+9	; 0x09
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	90 96       	adiw	r26, 0x20	; 32
     42a:	2c 91       	ld	r18, X
     42c:	90 97       	sbiw	r26, 0x20	; 32
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	03 84       	ldd	r0, Z+11	; 0x0b
     434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	0a 94       	dec	r0
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43e:	82 2b       	or	r24, r18
     440:	90 96       	adiw	r26, 0x20	; 32
     442:	8c 93       	st	X, r24
     444:	61 fd       	sbrc	r22, 1
     446:	12 c0       	rjmp	.+36     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     448:	a4 85       	ldd	r26, Z+12	; 0x0c
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	90 96       	adiw	r26, 0x20	; 32
     44e:	2c 91       	ld	r18, X
     450:	90 97       	sbiw	r26, 0x20	; 32
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	06 84       	ldd	r0, Z+14	; 0x0e
     458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	0a 94       	dec	r0
     460:	e2 f7       	brpl	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     462:	80 95       	com	r24
     464:	82 23       	and	r24, r18
     466:	90 96       	adiw	r26, 0x20	; 32
     468:	8c 93       	st	X, r24
     46a:	10 c0       	rjmp	.+32     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     46c:	a4 85       	ldd	r26, Z+12	; 0x0c
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	90 96       	adiw	r26, 0x20	; 32
     472:	2c 91       	ld	r18, X
     474:	90 97       	sbiw	r26, 0x20	; 32
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	06 84       	ldd	r0, Z+14	; 0x0e
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	0a 94       	dec	r0
     484:	e2 f7       	brpl	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     486:	82 2b       	or	r24, r18
     488:	90 96       	adiw	r26, 0x20	; 32
     48a:	8c 93       	st	X, r24
     48c:	62 fd       	sbrc	r22, 2
     48e:	12 c0       	rjmp	.+36     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     490:	a7 85       	ldd	r26, Z+15	; 0x0f
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	90 96       	adiw	r26, 0x20	; 32
     496:	2c 91       	ld	r18, X
     498:	90 97       	sbiw	r26, 0x20	; 32
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	01 88       	ldd	r0, Z+17	; 0x11
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	0a 94       	dec	r0
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4aa:	80 95       	com	r24
     4ac:	82 23       	and	r24, r18
     4ae:	90 96       	adiw	r26, 0x20	; 32
     4b0:	8c 93       	st	X, r24
     4b2:	10 c0       	rjmp	.+32     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4b4:	a7 85       	ldd	r26, Z+15	; 0x0f
     4b6:	b0 e0       	ldi	r27, 0x00	; 0
     4b8:	90 96       	adiw	r26, 0x20	; 32
     4ba:	2c 91       	ld	r18, X
     4bc:	90 97       	sbiw	r26, 0x20	; 32
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	01 88       	ldd	r0, Z+17	; 0x11
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	0a 94       	dec	r0
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4ce:	82 2b       	or	r24, r18
     4d0:	90 96       	adiw	r26, 0x20	; 32
     4d2:	8c 93       	st	X, r24
     4d4:	63 fd       	sbrc	r22, 3
     4d6:	12 c0       	rjmp	.+36     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4d8:	a2 89       	ldd	r26, Z+18	; 0x12
     4da:	b0 e0       	ldi	r27, 0x00	; 0
     4dc:	90 96       	adiw	r26, 0x20	; 32
     4de:	2c 91       	ld	r18, X
     4e0:	90 97       	sbiw	r26, 0x20	; 32
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	04 88       	ldd	r0, Z+20	; 0x14
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	0a 94       	dec	r0
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f2:	80 95       	com	r24
     4f4:	82 23       	and	r24, r18
     4f6:	90 96       	adiw	r26, 0x20	; 32
     4f8:	8c 93       	st	X, r24
     4fa:	10 c0       	rjmp	.+32     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     4fc:	a2 89       	ldd	r26, Z+18	; 0x12
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	90 96       	adiw	r26, 0x20	; 32
     502:	2c 91       	ld	r18, X
     504:	90 97       	sbiw	r26, 0x20	; 32
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	04 88       	ldd	r0, Z+20	; 0x14
     50c:	02 c0       	rjmp	.+4      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	0a 94       	dec	r0
     514:	e2 f7       	brpl	.-8      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     516:	82 2b       	or	r24, r18
     518:	90 96       	adiw	r26, 0x20	; 32
     51a:	8c 93       	st	X, r24
     51c:	a0 81       	ld	r26, Z
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	90 96       	adiw	r26, 0x20	; 32
     522:	4c 91       	ld	r20, X
     524:	90 97       	sbiw	r26, 0x20	; 32
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9c 01       	movw	r18, r24
     52c:	02 80       	ldd	r0, Z+2	; 0x02
     52e:	02 c0       	rjmp	.+4      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     530:	22 0f       	add	r18, r18
     532:	33 1f       	adc	r19, r19
     534:	0a 94       	dec	r0
     536:	e2 f7       	brpl	.-8      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     538:	24 2b       	or	r18, r20
     53a:	90 96       	adiw	r26, 0x20	; 32
     53c:	2c 93       	st	X, r18
     53e:	a6 81       	ldd	r26, Z+6	; 0x06
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	90 96       	adiw	r26, 0x20	; 32
     544:	4c 91       	ld	r20, X
     546:	90 97       	sbiw	r26, 0x20	; 32
     548:	9c 01       	movw	r18, r24
     54a:	00 84       	ldd	r0, Z+8	; 0x08
     54c:	02 c0       	rjmp	.+4      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     54e:	22 0f       	add	r18, r18
     550:	33 1f       	adc	r19, r19
     552:	0a 94       	dec	r0
     554:	e2 f7       	brpl	.-8      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     556:	24 2b       	or	r18, r20
     558:	90 96       	adiw	r26, 0x20	; 32
     55a:	2c 93       	st	X, r18
     55c:	af ec       	ldi	r26, 0xCF	; 207
     55e:	b7 e0       	ldi	r27, 0x07	; 7
     560:	11 97       	sbiw	r26, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     564:	00 c0       	rjmp	.+0      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     566:	00 00       	nop
     568:	a6 81       	ldd	r26, Z+6	; 0x06
     56a:	b0 e0       	ldi	r27, 0x00	; 0
     56c:	90 96       	adiw	r26, 0x20	; 32
     56e:	3c 91       	ld	r19, X
     570:	90 97       	sbiw	r26, 0x20	; 32
     572:	ac 01       	movw	r20, r24
     574:	00 84       	ldd	r0, Z+8	; 0x08
     576:	02 c0       	rjmp	.+4      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     578:	44 0f       	add	r20, r20
     57a:	55 1f       	adc	r21, r21
     57c:	0a 94       	dec	r0
     57e:	e2 f7       	brpl	.-8      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     580:	24 2f       	mov	r18, r20
     582:	20 95       	com	r18
     584:	23 23       	and	r18, r19
     586:	90 96       	adiw	r26, 0x20	; 32
     588:	2c 93       	st	X, r18
     58a:	a0 81       	ld	r26, Z
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	90 96       	adiw	r26, 0x20	; 32
     590:	2c 91       	ld	r18, X
     592:	90 97       	sbiw	r26, 0x20	; 32
     594:	02 80       	ldd	r0, Z+2	; 0x02
     596:	02 c0       	rjmp	.+4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     5a0:	80 95       	com	r24
     5a2:	82 23       	and	r24, r18
     5a4:	90 96       	adiw	r26, 0x20	; 32
     5a6:	8c 93       	st	X, r24
     5a8:	8f ec       	ldi	r24, 0xCF	; 207
     5aa:	97 e0       	ldi	r25, 0x07	; 7
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5b2:	00 00       	nop
     5b4:	08 95       	ret

000005b6 <_ZN13Character_LCD12SendString_VEPhh>:
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	61 15       	cp	r22, r1
     5c4:	71 05       	cpc	r23, r1
     5c6:	c1 f0       	breq	.+48     	; 0x5f8 <_ZN13Character_LCD12SendString_VEPhh+0x42>
     5c8:	44 23       	and	r20, r20
     5ca:	81 f0       	breq	.+32     	; 0x5ec <_ZN13Character_LCD12SendString_VEPhh+0x36>
     5cc:	7c 01       	movw	r14, r24
     5ce:	eb 01       	movw	r28, r22
     5d0:	41 50       	subi	r20, 0x01	; 1
     5d2:	04 2f       	mov	r16, r20
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	0f 5f       	subi	r16, 0xFF	; 255
     5d8:	1f 4f       	sbci	r17, 0xFF	; 255
     5da:	06 0f       	add	r16, r22
     5dc:	17 1f       	adc	r17, r23
     5de:	69 91       	ld	r22, Y+
     5e0:	c7 01       	movw	r24, r14
     5e2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
     5e6:	c0 17       	cp	r28, r16
     5e8:	d1 07       	cpc	r29, r17
     5ea:	c9 f7       	brne	.-14     	; 0x5de <_ZN13Character_LCD12SendString_VEPhh+0x28>
     5ec:	8f ec       	ldi	r24, 0xCF	; 207
     5ee:	97 e0       	ldi	r25, 0x07	; 7
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <_ZN13Character_LCD12SendString_VEPhh+0x3a>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <_ZN13Character_LCD12SendString_VEPhh+0x40>
     5f6:	00 00       	nop
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	08 95       	ret

00000606 <_ZN13Character_LCD10SendStringEPc>:
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	eb 01       	movw	r28, r22
     610:	68 81       	ld	r22, Y
     612:	66 23       	and	r22, r22
     614:	41 f0       	breq	.+16     	; 0x626 <_ZN13Character_LCD10SendStringEPc+0x20>
     616:	8c 01       	movw	r16, r24
     618:	21 96       	adiw	r28, 0x01	; 1
     61a:	c8 01       	movw	r24, r16
     61c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
     620:	69 91       	ld	r22, Y+
     622:	61 11       	cpse	r22, r1
     624:	fa cf       	rjmp	.-12     	; 0x61a <_ZN13Character_LCD10SendStringEPc+0x14>
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	08 95       	ret

00000630 <_ZN13Character_LCD11SendCommandEh>:
     630:	fc 01       	movw	r30, r24
     632:	64 fd       	sbrc	r22, 4
     634:	12 c0       	rjmp	.+36     	; 0x65a <_ZN13Character_LCD11SendCommandEh+0x2a>
     636:	a1 85       	ldd	r26, Z+9	; 0x09
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	90 96       	adiw	r26, 0x20	; 32
     63c:	2c 91       	ld	r18, X
     63e:	90 97       	sbiw	r26, 0x20	; 32
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	03 84       	ldd	r0, Z+11	; 0x0b
     646:	02 c0       	rjmp	.+4      	; 0x64c <_ZN13Character_LCD11SendCommandEh+0x1c>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	0a 94       	dec	r0
     64e:	e2 f7       	brpl	.-8      	; 0x648 <_ZN13Character_LCD11SendCommandEh+0x18>
     650:	80 95       	com	r24
     652:	82 23       	and	r24, r18
     654:	90 96       	adiw	r26, 0x20	; 32
     656:	8c 93       	st	X, r24
     658:	10 c0       	rjmp	.+32     	; 0x67a <_ZN13Character_LCD11SendCommandEh+0x4a>
     65a:	a1 85       	ldd	r26, Z+9	; 0x09
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	90 96       	adiw	r26, 0x20	; 32
     660:	2c 91       	ld	r18, X
     662:	90 97       	sbiw	r26, 0x20	; 32
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	03 84       	ldd	r0, Z+11	; 0x0b
     66a:	02 c0       	rjmp	.+4      	; 0x670 <_ZN13Character_LCD11SendCommandEh+0x40>
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	0a 94       	dec	r0
     672:	e2 f7       	brpl	.-8      	; 0x66c <_ZN13Character_LCD11SendCommandEh+0x3c>
     674:	82 2b       	or	r24, r18
     676:	90 96       	adiw	r26, 0x20	; 32
     678:	8c 93       	st	X, r24
     67a:	65 fd       	sbrc	r22, 5
     67c:	12 c0       	rjmp	.+36     	; 0x6a2 <_ZN13Character_LCD11SendCommandEh+0x72>
     67e:	a4 85       	ldd	r26, Z+12	; 0x0c
     680:	b0 e0       	ldi	r27, 0x00	; 0
     682:	90 96       	adiw	r26, 0x20	; 32
     684:	2c 91       	ld	r18, X
     686:	90 97       	sbiw	r26, 0x20	; 32
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	06 84       	ldd	r0, Z+14	; 0x0e
     68e:	02 c0       	rjmp	.+4      	; 0x694 <_ZN13Character_LCD11SendCommandEh+0x64>
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <_ZN13Character_LCD11SendCommandEh+0x60>
     698:	80 95       	com	r24
     69a:	82 23       	and	r24, r18
     69c:	90 96       	adiw	r26, 0x20	; 32
     69e:	8c 93       	st	X, r24
     6a0:	10 c0       	rjmp	.+32     	; 0x6c2 <_ZN13Character_LCD11SendCommandEh+0x92>
     6a2:	a4 85       	ldd	r26, Z+12	; 0x0c
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	90 96       	adiw	r26, 0x20	; 32
     6a8:	2c 91       	ld	r18, X
     6aa:	90 97       	sbiw	r26, 0x20	; 32
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	06 84       	ldd	r0, Z+14	; 0x0e
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <_ZN13Character_LCD11SendCommandEh+0x88>
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	0a 94       	dec	r0
     6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <_ZN13Character_LCD11SendCommandEh+0x84>
     6bc:	82 2b       	or	r24, r18
     6be:	90 96       	adiw	r26, 0x20	; 32
     6c0:	8c 93       	st	X, r24
     6c2:	66 fd       	sbrc	r22, 6
     6c4:	12 c0       	rjmp	.+36     	; 0x6ea <_ZN13Character_LCD11SendCommandEh+0xba>
     6c6:	a7 85       	ldd	r26, Z+15	; 0x0f
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	90 96       	adiw	r26, 0x20	; 32
     6cc:	2c 91       	ld	r18, X
     6ce:	90 97       	sbiw	r26, 0x20	; 32
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	01 88       	ldd	r0, Z+17	; 0x11
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <_ZN13Character_LCD11SendCommandEh+0xac>
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	0a 94       	dec	r0
     6de:	e2 f7       	brpl	.-8      	; 0x6d8 <_ZN13Character_LCD11SendCommandEh+0xa8>
     6e0:	80 95       	com	r24
     6e2:	82 23       	and	r24, r18
     6e4:	90 96       	adiw	r26, 0x20	; 32
     6e6:	8c 93       	st	X, r24
     6e8:	10 c0       	rjmp	.+32     	; 0x70a <_ZN13Character_LCD11SendCommandEh+0xda>
     6ea:	a7 85       	ldd	r26, Z+15	; 0x0f
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	90 96       	adiw	r26, 0x20	; 32
     6f0:	2c 91       	ld	r18, X
     6f2:	90 97       	sbiw	r26, 0x20	; 32
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	01 88       	ldd	r0, Z+17	; 0x11
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <_ZN13Character_LCD11SendCommandEh+0xd0>
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	0a 94       	dec	r0
     702:	e2 f7       	brpl	.-8      	; 0x6fc <_ZN13Character_LCD11SendCommandEh+0xcc>
     704:	82 2b       	or	r24, r18
     706:	90 96       	adiw	r26, 0x20	; 32
     708:	8c 93       	st	X, r24
     70a:	66 23       	and	r22, r22
     70c:	94 f0       	brlt	.+36     	; 0x732 <_ZN13Character_LCD11SendCommandEh+0x102>
     70e:	a2 89       	ldd	r26, Z+18	; 0x12
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	90 96       	adiw	r26, 0x20	; 32
     714:	2c 91       	ld	r18, X
     716:	90 97       	sbiw	r26, 0x20	; 32
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	04 88       	ldd	r0, Z+20	; 0x14
     71e:	02 c0       	rjmp	.+4      	; 0x724 <_ZN13Character_LCD11SendCommandEh+0xf4>
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <_ZN13Character_LCD11SendCommandEh+0xf0>
     728:	80 95       	com	r24
     72a:	82 23       	and	r24, r18
     72c:	90 96       	adiw	r26, 0x20	; 32
     72e:	8c 93       	st	X, r24
     730:	10 c0       	rjmp	.+32     	; 0x752 <_ZN13Character_LCD11SendCommandEh+0x122>
     732:	a2 89       	ldd	r26, Z+18	; 0x12
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	90 96       	adiw	r26, 0x20	; 32
     738:	2c 91       	ld	r18, X
     73a:	90 97       	sbiw	r26, 0x20	; 32
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	04 88       	ldd	r0, Z+20	; 0x14
     742:	02 c0       	rjmp	.+4      	; 0x748 <_ZN13Character_LCD11SendCommandEh+0x118>
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	0a 94       	dec	r0
     74a:	e2 f7       	brpl	.-8      	; 0x744 <_ZN13Character_LCD11SendCommandEh+0x114>
     74c:	82 2b       	or	r24, r18
     74e:	90 96       	adiw	r26, 0x20	; 32
     750:	8c 93       	st	X, r24
     752:	a6 81       	ldd	r26, Z+6	; 0x06
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	90 96       	adiw	r26, 0x20	; 32
     758:	4c 91       	ld	r20, X
     75a:	90 97       	sbiw	r26, 0x20	; 32
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9c 01       	movw	r18, r24
     762:	00 84       	ldd	r0, Z+8	; 0x08
     764:	02 c0       	rjmp	.+4      	; 0x76a <_ZN13Character_LCD11SendCommandEh+0x13a>
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	0a 94       	dec	r0
     76c:	e2 f7       	brpl	.-8      	; 0x766 <_ZN13Character_LCD11SendCommandEh+0x136>
     76e:	24 2b       	or	r18, r20
     770:	90 96       	adiw	r26, 0x20	; 32
     772:	2c 93       	st	X, r18
     774:	af ec       	ldi	r26, 0xCF	; 207
     776:	b7 e0       	ldi	r27, 0x07	; 7
     778:	11 97       	sbiw	r26, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <_ZN13Character_LCD11SendCommandEh+0x148>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <_ZN13Character_LCD11SendCommandEh+0x14e>
     77e:	00 00       	nop
     780:	a6 81       	ldd	r26, Z+6	; 0x06
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	90 96       	adiw	r26, 0x20	; 32
     786:	2c 91       	ld	r18, X
     788:	90 97       	sbiw	r26, 0x20	; 32
     78a:	00 84       	ldd	r0, Z+8	; 0x08
     78c:	02 c0       	rjmp	.+4      	; 0x792 <_ZN13Character_LCD11SendCommandEh+0x162>
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	0a 94       	dec	r0
     794:	e2 f7       	brpl	.-8      	; 0x78e <_ZN13Character_LCD11SendCommandEh+0x15e>
     796:	80 95       	com	r24
     798:	82 23       	and	r24, r18
     79a:	90 96       	adiw	r26, 0x20	; 32
     79c:	8c 93       	st	X, r24
     79e:	8f ec       	ldi	r24, 0xCF	; 207
     7a0:	97 e0       	ldi	r25, 0x07	; 7
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <_ZN13Character_LCD11SendCommandEh+0x172>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <_ZN13Character_LCD11SendCommandEh+0x178>
     7a8:	00 00       	nop
     7aa:	60 fd       	sbrc	r22, 0
     7ac:	12 c0       	rjmp	.+36     	; 0x7d2 <_ZN13Character_LCD11SendCommandEh+0x1a2>
     7ae:	a1 85       	ldd	r26, Z+9	; 0x09
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	90 96       	adiw	r26, 0x20	; 32
     7b4:	2c 91       	ld	r18, X
     7b6:	90 97       	sbiw	r26, 0x20	; 32
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	03 84       	ldd	r0, Z+11	; 0x0b
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <_ZN13Character_LCD11SendCommandEh+0x194>
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	0a 94       	dec	r0
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <_ZN13Character_LCD11SendCommandEh+0x190>
     7c8:	80 95       	com	r24
     7ca:	82 23       	and	r24, r18
     7cc:	90 96       	adiw	r26, 0x20	; 32
     7ce:	8c 93       	st	X, r24
     7d0:	10 c0       	rjmp	.+32     	; 0x7f2 <_ZN13Character_LCD11SendCommandEh+0x1c2>
     7d2:	a1 85       	ldd	r26, Z+9	; 0x09
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	90 96       	adiw	r26, 0x20	; 32
     7d8:	2c 91       	ld	r18, X
     7da:	90 97       	sbiw	r26, 0x20	; 32
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	03 84       	ldd	r0, Z+11	; 0x0b
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <_ZN13Character_LCD11SendCommandEh+0x1b8>
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	0a 94       	dec	r0
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <_ZN13Character_LCD11SendCommandEh+0x1b4>
     7ec:	82 2b       	or	r24, r18
     7ee:	90 96       	adiw	r26, 0x20	; 32
     7f0:	8c 93       	st	X, r24
     7f2:	61 fd       	sbrc	r22, 1
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <_ZN13Character_LCD11SendCommandEh+0x1ea>
     7f6:	a4 85       	ldd	r26, Z+12	; 0x0c
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	90 96       	adiw	r26, 0x20	; 32
     7fc:	2c 91       	ld	r18, X
     7fe:	90 97       	sbiw	r26, 0x20	; 32
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	06 84       	ldd	r0, Z+14	; 0x0e
     806:	02 c0       	rjmp	.+4      	; 0x80c <_ZN13Character_LCD11SendCommandEh+0x1dc>
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	0a 94       	dec	r0
     80e:	e2 f7       	brpl	.-8      	; 0x808 <_ZN13Character_LCD11SendCommandEh+0x1d8>
     810:	80 95       	com	r24
     812:	82 23       	and	r24, r18
     814:	90 96       	adiw	r26, 0x20	; 32
     816:	8c 93       	st	X, r24
     818:	10 c0       	rjmp	.+32     	; 0x83a <_ZN13Character_LCD11SendCommandEh+0x20a>
     81a:	a4 85       	ldd	r26, Z+12	; 0x0c
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	90 96       	adiw	r26, 0x20	; 32
     820:	2c 91       	ld	r18, X
     822:	90 97       	sbiw	r26, 0x20	; 32
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	06 84       	ldd	r0, Z+14	; 0x0e
     82a:	02 c0       	rjmp	.+4      	; 0x830 <_ZN13Character_LCD11SendCommandEh+0x200>
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	0a 94       	dec	r0
     832:	e2 f7       	brpl	.-8      	; 0x82c <_ZN13Character_LCD11SendCommandEh+0x1fc>
     834:	82 2b       	or	r24, r18
     836:	90 96       	adiw	r26, 0x20	; 32
     838:	8c 93       	st	X, r24
     83a:	62 fd       	sbrc	r22, 2
     83c:	12 c0       	rjmp	.+36     	; 0x862 <__stack+0x3>
     83e:	a7 85       	ldd	r26, Z+15	; 0x0f
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	90 96       	adiw	r26, 0x20	; 32
     844:	2c 91       	ld	r18, X
     846:	90 97       	sbiw	r26, 0x20	; 32
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	01 88       	ldd	r0, Z+17	; 0x11
     84e:	02 c0       	rjmp	.+4      	; 0x854 <_ZN13Character_LCD11SendCommandEh+0x224>
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	0a 94       	dec	r0
     856:	e2 f7       	brpl	.-8      	; 0x850 <_ZN13Character_LCD11SendCommandEh+0x220>
     858:	80 95       	com	r24
     85a:	82 23       	and	r24, r18
     85c:	90 96       	adiw	r26, 0x20	; 32
     85e:	8c 93       	st	X, r24
     860:	10 c0       	rjmp	.+32     	; 0x882 <__stack+0x23>
     862:	a7 85       	ldd	r26, Z+15	; 0x0f
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	90 96       	adiw	r26, 0x20	; 32
     868:	2c 91       	ld	r18, X
     86a:	90 97       	sbiw	r26, 0x20	; 32
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	01 88       	ldd	r0, Z+17	; 0x11
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	0a 94       	dec	r0
     87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
     87c:	82 2b       	or	r24, r18
     87e:	90 96       	adiw	r26, 0x20	; 32
     880:	8c 93       	st	X, r24
     882:	63 fd       	sbrc	r22, 3
     884:	12 c0       	rjmp	.+36     	; 0x8aa <__stack+0x4b>
     886:	a2 89       	ldd	r26, Z+18	; 0x12
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	90 96       	adiw	r26, 0x20	; 32
     88c:	2c 91       	ld	r18, X
     88e:	90 97       	sbiw	r26, 0x20	; 32
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	04 88       	ldd	r0, Z+20	; 0x14
     896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	0a 94       	dec	r0
     89e:	e2 f7       	brpl	.-8      	; 0x898 <__stack+0x39>
     8a0:	80 95       	com	r24
     8a2:	82 23       	and	r24, r18
     8a4:	90 96       	adiw	r26, 0x20	; 32
     8a6:	8c 93       	st	X, r24
     8a8:	10 c0       	rjmp	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	a2 89       	ldd	r26, Z+18	; 0x12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	90 96       	adiw	r26, 0x20	; 32
     8b0:	2c 91       	ld	r18, X
     8b2:	90 97       	sbiw	r26, 0x20	; 32
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	04 88       	ldd	r0, Z+20	; 0x14
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	0a 94       	dec	r0
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
     8c4:	82 2b       	or	r24, r18
     8c6:	90 96       	adiw	r26, 0x20	; 32
     8c8:	8c 93       	st	X, r24
     8ca:	a6 81       	ldd	r26, Z+6	; 0x06
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	90 96       	adiw	r26, 0x20	; 32
     8d0:	4c 91       	ld	r20, X
     8d2:	90 97       	sbiw	r26, 0x20	; 32
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	9c 01       	movw	r18, r24
     8da:	00 84       	ldd	r0, Z+8	; 0x08
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__stack+0x83>
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	0a 94       	dec	r0
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <__stack+0x7f>
     8e6:	24 2b       	or	r18, r20
     8e8:	90 96       	adiw	r26, 0x20	; 32
     8ea:	2c 93       	st	X, r18
     8ec:	af ec       	ldi	r26, 0xCF	; 207
     8ee:	b7 e0       	ldi	r27, 0x07	; 7
     8f0:	11 97       	sbiw	r26, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <__stack+0x91>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <__stack+0x97>
     8f6:	00 00       	nop
     8f8:	a6 81       	ldd	r26, Z+6	; 0x06
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	90 96       	adiw	r26, 0x20	; 32
     8fe:	2c 91       	ld	r18, X
     900:	90 97       	sbiw	r26, 0x20	; 32
     902:	00 84       	ldd	r0, Z+8	; 0x08
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xab>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	0a 94       	dec	r0
     90c:	e2 f7       	brpl	.-8      	; 0x906 <__stack+0xa7>
     90e:	80 95       	com	r24
     910:	82 23       	and	r24, r18
     912:	90 96       	adiw	r26, 0x20	; 32
     914:	8c 93       	st	X, r24
     916:	8f ec       	ldi	r24, 0xCF	; 207
     918:	97 e0       	ldi	r25, 0x07	; 7
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <__stack+0xbb>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0xc1>
     920:	00 00       	nop
     922:	08 95       	ret

00000924 <_ZN13Character_LCD3ClrEv>:
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 18 03 	call	0x630	; 0x630 <_ZN13Character_LCD11SendCommandEh>
     92a:	8f ec       	ldi	r24, 0xCF	; 207
     92c:	97 e0       	ldi	r25, 0x07	; 7
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	f1 f7       	brne	.-4      	; 0x92e <_ZN13Character_LCD3ClrEv+0xa>
     932:	00 c0       	rjmp	.+0      	; 0x934 <_ZN13Character_LCD3ClrEv+0x10>
     934:	00 00       	nop
     936:	08 95       	ret

00000938 <_ZN13Character_LCD6GotoXYEhh>:
     938:	42 30       	cpi	r20, 0x02	; 2
     93a:	31 f0       	breq	.+12     	; 0x948 <_ZN13Character_LCD6GotoXYEhh+0x10>
     93c:	43 30       	cpi	r20, 0x03	; 3
     93e:	31 f0       	breq	.+12     	; 0x94c <_ZN13Character_LCD6GotoXYEhh+0x14>
     940:	41 30       	cpi	r20, 0x01	; 1
     942:	29 f4       	brne	.+10     	; 0x94e <_ZN13Character_LCD6GotoXYEhh+0x16>
     944:	60 5c       	subi	r22, 0xC0	; 192
     946:	03 c0       	rjmp	.+6      	; 0x94e <_ZN13Character_LCD6GotoXYEhh+0x16>
     948:	6c 5e       	subi	r22, 0xEC	; 236
     94a:	01 c0       	rjmp	.+2      	; 0x94e <_ZN13Character_LCD6GotoXYEhh+0x16>
     94c:	6c 5a       	subi	r22, 0xAC	; 172
     94e:	60 68       	ori	r22, 0x80	; 128
     950:	0e 94 18 03 	call	0x630	; 0x630 <_ZN13Character_LCD11SendCommandEh>
     954:	8f ec       	ldi	r24, 0xCF	; 207
     956:	97 e0       	ldi	r25, 0x07	; 7
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <_ZN13Character_LCD6GotoXYEhh+0x20>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <_ZN13Character_LCD6GotoXYEhh+0x26>
     95e:	00 00       	nop
     960:	08 95       	ret

00000962 <_ZN13Character_LCD10CopyStringEPKhhh>:
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	7c 01       	movw	r14, r24
     96e:	8b 01       	movw	r16, r22
     970:	64 2f       	mov	r22, r20
     972:	42 2f       	mov	r20, r18
     974:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN13Character_LCD6GotoXYEhh>
     978:	b8 01       	movw	r22, r16
     97a:	f8 01       	movw	r30, r16
     97c:	84 91       	lpm	r24, Z
     97e:	88 23       	and	r24, r24
     980:	71 f0       	breq	.+28     	; 0x99e <_ZN13Character_LCD10CopyStringEPKhhh+0x3c>
     982:	c0 e0       	ldi	r28, 0x00	; 0
     984:	fb 01       	movw	r30, r22
     986:	64 91       	lpm	r22, Z
     988:	c7 01       	movw	r24, r14
     98a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
     98e:	cf 5f       	subi	r28, 0xFF	; 255
     990:	b8 01       	movw	r22, r16
     992:	6c 0f       	add	r22, r28
     994:	71 1d       	adc	r23, r1
     996:	fb 01       	movw	r30, r22
     998:	84 91       	lpm	r24, Z
     99a:	81 11       	cpse	r24, r1
     99c:	f3 cf       	rjmp	.-26     	; 0x984 <_ZN13Character_LCD10CopyStringEPKhhh+0x22>
     99e:	8f ec       	ldi	r24, 0xCF	; 207
     9a0:	97 e0       	ldi	r25, 0x07	; 7
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <_ZN13Character_LCD10CopyStringEPKhhh+0x40>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <_ZN13Character_LCD10CopyStringEPKhhh+0x46>
     9a8:	00 00       	nop
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	08 95       	ret

000009b6 <_ZN13Character_LCD4InitEv>:
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ec 01       	movw	r28, r24
     9bc:	8f e2       	ldi	r24, 0x2F	; 47
     9be:	95 e7       	ldi	r25, 0x75	; 117
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <_ZN13Character_LCD4InitEv+0xa>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <_ZN13Character_LCD4InitEv+0x10>
     9c6:	00 00       	nop
     9c8:	e9 85       	ldd	r30, Y+9	; 0x09
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	30 a1       	ldd	r19, Z+32	; 0x20
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	ac 01       	movw	r20, r24
     9d4:	0b 84       	ldd	r0, Y+11	; 0x0b
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <_ZN13Character_LCD4InitEv+0x26>
     9d8:	44 0f       	add	r20, r20
     9da:	55 1f       	adc	r21, r21
     9dc:	0a 94       	dec	r0
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <_ZN13Character_LCD4InitEv+0x22>
     9e0:	24 2f       	mov	r18, r20
     9e2:	20 95       	com	r18
     9e4:	23 23       	and	r18, r19
     9e6:	20 a3       	std	Z+32, r18	; 0x20
     9e8:	ec 85       	ldd	r30, Y+12	; 0x0c
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	30 a1       	ldd	r19, Z+32	; 0x20
     9ee:	ac 01       	movw	r20, r24
     9f0:	0e 84       	ldd	r0, Y+14	; 0x0e
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <_ZN13Character_LCD4InitEv+0x42>
     9f4:	44 0f       	add	r20, r20
     9f6:	55 1f       	adc	r21, r21
     9f8:	0a 94       	dec	r0
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <_ZN13Character_LCD4InitEv+0x3e>
     9fc:	24 2f       	mov	r18, r20
     9fe:	20 95       	com	r18
     a00:	23 23       	and	r18, r19
     a02:	20 a3       	std	Z+32, r18	; 0x20
     a04:	ef 85       	ldd	r30, Y+15	; 0x0f
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	30 a1       	ldd	r19, Z+32	; 0x20
     a0a:	ac 01       	movw	r20, r24
     a0c:	09 88       	ldd	r0, Y+17	; 0x11
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <_ZN13Character_LCD4InitEv+0x5e>
     a10:	44 0f       	add	r20, r20
     a12:	55 1f       	adc	r21, r21
     a14:	0a 94       	dec	r0
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <_ZN13Character_LCD4InitEv+0x5a>
     a18:	24 2f       	mov	r18, r20
     a1a:	20 95       	com	r18
     a1c:	23 23       	and	r18, r19
     a1e:	20 a3       	std	Z+32, r18	; 0x20
     a20:	ea 89       	ldd	r30, Y+18	; 0x12
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	30 a1       	ldd	r19, Z+32	; 0x20
     a26:	ac 01       	movw	r20, r24
     a28:	0c 88       	ldd	r0, Y+20	; 0x14
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <_ZN13Character_LCD4InitEv+0x7a>
     a2c:	44 0f       	add	r20, r20
     a2e:	55 1f       	adc	r21, r21
     a30:	0a 94       	dec	r0
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <_ZN13Character_LCD4InitEv+0x76>
     a34:	24 2f       	mov	r18, r20
     a36:	20 95       	com	r18
     a38:	23 23       	and	r18, r19
     a3a:	20 a3       	std	Z+32, r18	; 0x20
     a3c:	ee 81       	ldd	r30, Y+6	; 0x06
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	30 a1       	ldd	r19, Z+32	; 0x20
     a42:	ac 01       	movw	r20, r24
     a44:	08 84       	ldd	r0, Y+8	; 0x08
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <_ZN13Character_LCD4InitEv+0x96>
     a48:	44 0f       	add	r20, r20
     a4a:	55 1f       	adc	r21, r21
     a4c:	0a 94       	dec	r0
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <_ZN13Character_LCD4InitEv+0x92>
     a50:	24 2f       	mov	r18, r20
     a52:	20 95       	com	r18
     a54:	23 23       	and	r18, r19
     a56:	20 a3       	std	Z+32, r18	; 0x20
     a58:	ea 85       	ldd	r30, Y+10	; 0x0a
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	40 a1       	ldd	r20, Z+32	; 0x20
     a5e:	9c 01       	movw	r18, r24
     a60:	0b 84       	ldd	r0, Y+11	; 0x0b
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <_ZN13Character_LCD4InitEv+0xb2>
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	0a 94       	dec	r0
     a6a:	e2 f7       	brpl	.-8      	; 0xa64 <_ZN13Character_LCD4InitEv+0xae>
     a6c:	24 2b       	or	r18, r20
     a6e:	20 a3       	std	Z+32, r18	; 0x20
     a70:	ed 85       	ldd	r30, Y+13	; 0x0d
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	40 a1       	ldd	r20, Z+32	; 0x20
     a76:	9c 01       	movw	r18, r24
     a78:	0e 84       	ldd	r0, Y+14	; 0x0e
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <_ZN13Character_LCD4InitEv+0xca>
     a7c:	22 0f       	add	r18, r18
     a7e:	33 1f       	adc	r19, r19
     a80:	0a 94       	dec	r0
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <_ZN13Character_LCD4InitEv+0xc6>
     a84:	24 2b       	or	r18, r20
     a86:	20 a3       	std	Z+32, r18	; 0x20
     a88:	e8 89       	ldd	r30, Y+16	; 0x10
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	40 a1       	ldd	r20, Z+32	; 0x20
     a8e:	9c 01       	movw	r18, r24
     a90:	09 88       	ldd	r0, Y+17	; 0x11
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <_ZN13Character_LCD4InitEv+0xe2>
     a94:	22 0f       	add	r18, r18
     a96:	33 1f       	adc	r19, r19
     a98:	0a 94       	dec	r0
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <_ZN13Character_LCD4InitEv+0xde>
     a9c:	24 2b       	or	r18, r20
     a9e:	20 a3       	std	Z+32, r18	; 0x20
     aa0:	eb 89       	ldd	r30, Y+19	; 0x13
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	40 a1       	ldd	r20, Z+32	; 0x20
     aa6:	9c 01       	movw	r18, r24
     aa8:	0c 88       	ldd	r0, Y+20	; 0x14
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <_ZN13Character_LCD4InitEv+0xfa>
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	0a 94       	dec	r0
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <_ZN13Character_LCD4InitEv+0xf6>
     ab4:	24 2b       	or	r18, r20
     ab6:	20 a3       	std	Z+32, r18	; 0x20
     ab8:	ef 81       	ldd	r30, Y+7	; 0x07
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	40 a1       	ldd	r20, Z+32	; 0x20
     abe:	9c 01       	movw	r18, r24
     ac0:	08 84       	ldd	r0, Y+8	; 0x08
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <_ZN13Character_LCD4InitEv+0x112>
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	0a 94       	dec	r0
     aca:	e2 f7       	brpl	.-8      	; 0xac4 <_ZN13Character_LCD4InitEv+0x10e>
     acc:	24 2b       	or	r18, r20
     ace:	20 a3       	std	Z+32, r18	; 0x20
     ad0:	e9 81       	ldd	r30, Y+1	; 0x01
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	40 a1       	ldd	r20, Z+32	; 0x20
     ad6:	9c 01       	movw	r18, r24
     ad8:	0a 80       	ldd	r0, Y+2	; 0x02
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <_ZN13Character_LCD4InitEv+0x12a>
     adc:	22 0f       	add	r18, r18
     ade:	33 1f       	adc	r19, r19
     ae0:	0a 94       	dec	r0
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <_ZN13Character_LCD4InitEv+0x126>
     ae4:	24 2b       	or	r18, r20
     ae6:	20 a3       	std	Z+32, r18	; 0x20
     ae8:	ec 81       	ldd	r30, Y+4	; 0x04
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	40 a1       	ldd	r20, Z+32	; 0x20
     aee:	9c 01       	movw	r18, r24
     af0:	0d 80       	ldd	r0, Y+5	; 0x05
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <_ZN13Character_LCD4InitEv+0x142>
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	0a 94       	dec	r0
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <_ZN13Character_LCD4InitEv+0x13e>
     afc:	24 2b       	or	r18, r20
     afe:	20 a3       	std	Z+32, r18	; 0x20
     b00:	e9 85       	ldd	r30, Y+9	; 0x09
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	40 a1       	ldd	r20, Z+32	; 0x20
     b06:	9c 01       	movw	r18, r24
     b08:	0b 84       	ldd	r0, Y+11	; 0x0b
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <_ZN13Character_LCD4InitEv+0x15a>
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	0a 94       	dec	r0
     b12:	e2 f7       	brpl	.-8      	; 0xb0c <_ZN13Character_LCD4InitEv+0x156>
     b14:	24 2b       	or	r18, r20
     b16:	20 a3       	std	Z+32, r18	; 0x20
     b18:	ec 85       	ldd	r30, Y+12	; 0x0c
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	40 a1       	ldd	r20, Z+32	; 0x20
     b1e:	9c 01       	movw	r18, r24
     b20:	0e 84       	ldd	r0, Y+14	; 0x0e
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <_ZN13Character_LCD4InitEv+0x172>
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	0a 94       	dec	r0
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <_ZN13Character_LCD4InitEv+0x16e>
     b2c:	24 2b       	or	r18, r20
     b2e:	20 a3       	std	Z+32, r18	; 0x20
     b30:	ef 85       	ldd	r30, Y+15	; 0x0f
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	30 a1       	ldd	r19, Z+32	; 0x20
     b36:	ac 01       	movw	r20, r24
     b38:	09 88       	ldd	r0, Y+17	; 0x11
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <_ZN13Character_LCD4InitEv+0x18a>
     b3c:	44 0f       	add	r20, r20
     b3e:	55 1f       	adc	r21, r21
     b40:	0a 94       	dec	r0
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <_ZN13Character_LCD4InitEv+0x186>
     b44:	24 2f       	mov	r18, r20
     b46:	20 95       	com	r18
     b48:	23 23       	and	r18, r19
     b4a:	20 a3       	std	Z+32, r18	; 0x20
     b4c:	ea 89       	ldd	r30, Y+18	; 0x12
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	30 a1       	ldd	r19, Z+32	; 0x20
     b52:	ac 01       	movw	r20, r24
     b54:	0c 88       	ldd	r0, Y+20	; 0x14
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <_ZN13Character_LCD4InitEv+0x1a6>
     b58:	44 0f       	add	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <_ZN13Character_LCD4InitEv+0x1a2>
     b60:	24 2f       	mov	r18, r20
     b62:	20 95       	com	r18
     b64:	23 23       	and	r18, r19
     b66:	20 a3       	std	Z+32, r18	; 0x20
     b68:	ee 81       	ldd	r30, Y+6	; 0x06
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	40 a1       	ldd	r20, Z+32	; 0x20
     b6e:	9c 01       	movw	r18, r24
     b70:	08 84       	ldd	r0, Y+8	; 0x08
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <_ZN13Character_LCD4InitEv+0x1c2>
     b74:	22 0f       	add	r18, r18
     b76:	33 1f       	adc	r19, r19
     b78:	0a 94       	dec	r0
     b7a:	e2 f7       	brpl	.-8      	; 0xb74 <_ZN13Character_LCD4InitEv+0x1be>
     b7c:	24 2b       	or	r18, r20
     b7e:	20 a3       	std	Z+32, r18	; 0x20
     b80:	e8 81       	ld	r30, Y
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	30 a1       	ldd	r19, Z+32	; 0x20
     b86:	ac 01       	movw	r20, r24
     b88:	0a 80       	ldd	r0, Y+2	; 0x02
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <_ZN13Character_LCD4InitEv+0x1da>
     b8c:	44 0f       	add	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	0a 94       	dec	r0
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <_ZN13Character_LCD4InitEv+0x1d6>
     b94:	24 2f       	mov	r18, r20
     b96:	20 95       	com	r18
     b98:	23 23       	and	r18, r19
     b9a:	20 a3       	std	Z+32, r18	; 0x20
     b9c:	eb 81       	ldd	r30, Y+3	; 0x03
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	30 a1       	ldd	r19, Z+32	; 0x20
     ba2:	ac 01       	movw	r20, r24
     ba4:	0d 80       	ldd	r0, Y+5	; 0x05
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <_ZN13Character_LCD4InitEv+0x1f6>
     ba8:	44 0f       	add	r20, r20
     baa:	55 1f       	adc	r21, r21
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <_ZN13Character_LCD4InitEv+0x1f2>
     bb0:	24 2f       	mov	r18, r20
     bb2:	20 95       	com	r18
     bb4:	23 23       	and	r18, r19
     bb6:	20 a3       	std	Z+32, r18	; 0x20
     bb8:	ef ec       	ldi	r30, 0xCF	; 207
     bba:	f7 e0       	ldi	r31, 0x07	; 7
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <_ZN13Character_LCD4InitEv+0x206>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <_ZN13Character_LCD4InitEv+0x20c>
     bc2:	00 00       	nop
     bc4:	ee 81       	ldd	r30, Y+6	; 0x06
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	30 a1       	ldd	r19, Z+32	; 0x20
     bca:	ac 01       	movw	r20, r24
     bcc:	08 84       	ldd	r0, Y+8	; 0x08
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <_ZN13Character_LCD4InitEv+0x21e>
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <_ZN13Character_LCD4InitEv+0x21a>
     bd8:	24 2f       	mov	r18, r20
     bda:	20 95       	com	r18
     bdc:	23 23       	and	r18, r19
     bde:	20 a3       	std	Z+32, r18	; 0x20
     be0:	ef ec       	ldi	r30, 0xCF	; 207
     be2:	f7 e0       	ldi	r31, 0x07	; 7
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <_ZN13Character_LCD4InitEv+0x22e>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <_ZN13Character_LCD4InitEv+0x234>
     bea:	00 00       	nop
     bec:	e9 85       	ldd	r30, Y+9	; 0x09
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	40 a1       	ldd	r20, Z+32	; 0x20
     bf2:	9c 01       	movw	r18, r24
     bf4:	0b 84       	ldd	r0, Y+11	; 0x0b
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <_ZN13Character_LCD4InitEv+0x246>
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <_ZN13Character_LCD4InitEv+0x242>
     c00:	24 2b       	or	r18, r20
     c02:	20 a3       	std	Z+32, r18	; 0x20
     c04:	ec 85       	ldd	r30, Y+12	; 0x0c
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	40 a1       	ldd	r20, Z+32	; 0x20
     c0a:	9c 01       	movw	r18, r24
     c0c:	0e 84       	ldd	r0, Y+14	; 0x0e
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <_ZN13Character_LCD4InitEv+0x25e>
     c10:	22 0f       	add	r18, r18
     c12:	33 1f       	adc	r19, r19
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <_ZN13Character_LCD4InitEv+0x25a>
     c18:	24 2b       	or	r18, r20
     c1a:	20 a3       	std	Z+32, r18	; 0x20
     c1c:	ef 85       	ldd	r30, Y+15	; 0x0f
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	30 a1       	ldd	r19, Z+32	; 0x20
     c22:	ac 01       	movw	r20, r24
     c24:	09 88       	ldd	r0, Y+17	; 0x11
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <_ZN13Character_LCD4InitEv+0x276>
     c28:	44 0f       	add	r20, r20
     c2a:	55 1f       	adc	r21, r21
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <_ZN13Character_LCD4InitEv+0x272>
     c30:	24 2f       	mov	r18, r20
     c32:	20 95       	com	r18
     c34:	23 23       	and	r18, r19
     c36:	20 a3       	std	Z+32, r18	; 0x20
     c38:	ea 89       	ldd	r30, Y+18	; 0x12
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	30 a1       	ldd	r19, Z+32	; 0x20
     c3e:	ac 01       	movw	r20, r24
     c40:	0c 88       	ldd	r0, Y+20	; 0x14
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <_ZN13Character_LCD4InitEv+0x292>
     c44:	44 0f       	add	r20, r20
     c46:	55 1f       	adc	r21, r21
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <_ZN13Character_LCD4InitEv+0x28e>
     c4c:	24 2f       	mov	r18, r20
     c4e:	20 95       	com	r18
     c50:	23 23       	and	r18, r19
     c52:	20 a3       	std	Z+32, r18	; 0x20
     c54:	ee 81       	ldd	r30, Y+6	; 0x06
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	40 a1       	ldd	r20, Z+32	; 0x20
     c5a:	9c 01       	movw	r18, r24
     c5c:	08 84       	ldd	r0, Y+8	; 0x08
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <_ZN13Character_LCD4InitEv+0x2ae>
     c60:	22 0f       	add	r18, r18
     c62:	33 1f       	adc	r19, r19
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <_ZN13Character_LCD4InitEv+0x2aa>
     c68:	24 2b       	or	r18, r20
     c6a:	20 a3       	std	Z+32, r18	; 0x20
     c6c:	e8 81       	ld	r30, Y
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	30 a1       	ldd	r19, Z+32	; 0x20
     c72:	ac 01       	movw	r20, r24
     c74:	0a 80       	ldd	r0, Y+2	; 0x02
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <_ZN13Character_LCD4InitEv+0x2c6>
     c78:	44 0f       	add	r20, r20
     c7a:	55 1f       	adc	r21, r21
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <_ZN13Character_LCD4InitEv+0x2c2>
     c80:	24 2f       	mov	r18, r20
     c82:	20 95       	com	r18
     c84:	23 23       	and	r18, r19
     c86:	20 a3       	std	Z+32, r18	; 0x20
     c88:	eb 81       	ldd	r30, Y+3	; 0x03
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	30 a1       	ldd	r19, Z+32	; 0x20
     c8e:	ac 01       	movw	r20, r24
     c90:	0d 80       	ldd	r0, Y+5	; 0x05
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <_ZN13Character_LCD4InitEv+0x2e2>
     c94:	44 0f       	add	r20, r20
     c96:	55 1f       	adc	r21, r21
     c98:	0a 94       	dec	r0
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <_ZN13Character_LCD4InitEv+0x2de>
     c9c:	24 2f       	mov	r18, r20
     c9e:	20 95       	com	r18
     ca0:	23 23       	and	r18, r19
     ca2:	20 a3       	std	Z+32, r18	; 0x20
     ca4:	ef ec       	ldi	r30, 0xCF	; 207
     ca6:	f7 e0       	ldi	r31, 0x07	; 7
     ca8:	31 97       	sbiw	r30, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <_ZN13Character_LCD4InitEv+0x2f2>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <_ZN13Character_LCD4InitEv+0x2f8>
     cae:	00 00       	nop
     cb0:	ee 81       	ldd	r30, Y+6	; 0x06
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	30 a1       	ldd	r19, Z+32	; 0x20
     cb6:	ac 01       	movw	r20, r24
     cb8:	08 84       	ldd	r0, Y+8	; 0x08
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <_ZN13Character_LCD4InitEv+0x30a>
     cbc:	44 0f       	add	r20, r20
     cbe:	55 1f       	adc	r21, r21
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <_ZN13Character_LCD4InitEv+0x306>
     cc4:	24 2f       	mov	r18, r20
     cc6:	20 95       	com	r18
     cc8:	23 23       	and	r18, r19
     cca:	20 a3       	std	Z+32, r18	; 0x20
     ccc:	ef ec       	ldi	r30, 0xCF	; 207
     cce:	f7 e0       	ldi	r31, 0x07	; 7
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <_ZN13Character_LCD4InitEv+0x31a>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <_ZN13Character_LCD4InitEv+0x320>
     cd6:	00 00       	nop
     cd8:	e9 85       	ldd	r30, Y+9	; 0x09
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	30 a1       	ldd	r19, Z+32	; 0x20
     cde:	ac 01       	movw	r20, r24
     ce0:	0b 84       	ldd	r0, Y+11	; 0x0b
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <_ZN13Character_LCD4InitEv+0x332>
     ce4:	44 0f       	add	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <_ZN13Character_LCD4InitEv+0x32e>
     cec:	24 2f       	mov	r18, r20
     cee:	20 95       	com	r18
     cf0:	23 23       	and	r18, r19
     cf2:	20 a3       	std	Z+32, r18	; 0x20
     cf4:	ec 85       	ldd	r30, Y+12	; 0x0c
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	40 a1       	ldd	r20, Z+32	; 0x20
     cfa:	9c 01       	movw	r18, r24
     cfc:	0e 84       	ldd	r0, Y+14	; 0x0e
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <_ZN13Character_LCD4InitEv+0x34e>
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <_ZN13Character_LCD4InitEv+0x34a>
     d08:	24 2b       	or	r18, r20
     d0a:	20 a3       	std	Z+32, r18	; 0x20
     d0c:	ef 85       	ldd	r30, Y+15	; 0x0f
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	30 a1       	ldd	r19, Z+32	; 0x20
     d12:	ac 01       	movw	r20, r24
     d14:	09 88       	ldd	r0, Y+17	; 0x11
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <_ZN13Character_LCD4InitEv+0x366>
     d18:	44 0f       	add	r20, r20
     d1a:	55 1f       	adc	r21, r21
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <_ZN13Character_LCD4InitEv+0x362>
     d20:	24 2f       	mov	r18, r20
     d22:	20 95       	com	r18
     d24:	23 23       	and	r18, r19
     d26:	20 a3       	std	Z+32, r18	; 0x20
     d28:	ea 89       	ldd	r30, Y+18	; 0x12
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	30 a1       	ldd	r19, Z+32	; 0x20
     d2e:	ac 01       	movw	r20, r24
     d30:	0c 88       	ldd	r0, Y+20	; 0x14
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <_ZN13Character_LCD4InitEv+0x382>
     d34:	44 0f       	add	r20, r20
     d36:	55 1f       	adc	r21, r21
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <_ZN13Character_LCD4InitEv+0x37e>
     d3c:	24 2f       	mov	r18, r20
     d3e:	20 95       	com	r18
     d40:	23 23       	and	r18, r19
     d42:	20 a3       	std	Z+32, r18	; 0x20
     d44:	ee 81       	ldd	r30, Y+6	; 0x06
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	40 a1       	ldd	r20, Z+32	; 0x20
     d4a:	9c 01       	movw	r18, r24
     d4c:	08 84       	ldd	r0, Y+8	; 0x08
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <_ZN13Character_LCD4InitEv+0x39e>
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <_ZN13Character_LCD4InitEv+0x39a>
     d58:	24 2b       	or	r18, r20
     d5a:	20 a3       	std	Z+32, r18	; 0x20
     d5c:	e8 81       	ld	r30, Y
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	30 a1       	ldd	r19, Z+32	; 0x20
     d62:	ac 01       	movw	r20, r24
     d64:	0a 80       	ldd	r0, Y+2	; 0x02
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <_ZN13Character_LCD4InitEv+0x3b6>
     d68:	44 0f       	add	r20, r20
     d6a:	55 1f       	adc	r21, r21
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <_ZN13Character_LCD4InitEv+0x3b2>
     d70:	24 2f       	mov	r18, r20
     d72:	20 95       	com	r18
     d74:	23 23       	and	r18, r19
     d76:	20 a3       	std	Z+32, r18	; 0x20
     d78:	eb 81       	ldd	r30, Y+3	; 0x03
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	30 a1       	ldd	r19, Z+32	; 0x20
     d7e:	ac 01       	movw	r20, r24
     d80:	0d 80       	ldd	r0, Y+5	; 0x05
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <_ZN13Character_LCD4InitEv+0x3d2>
     d84:	44 0f       	add	r20, r20
     d86:	55 1f       	adc	r21, r21
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <_ZN13Character_LCD4InitEv+0x3ce>
     d8c:	24 2f       	mov	r18, r20
     d8e:	20 95       	com	r18
     d90:	23 23       	and	r18, r19
     d92:	20 a3       	std	Z+32, r18	; 0x20
     d94:	ef ec       	ldi	r30, 0xCF	; 207
     d96:	f7 e0       	ldi	r31, 0x07	; 7
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <_ZN13Character_LCD4InitEv+0x3e2>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <_ZN13Character_LCD4InitEv+0x3e8>
     d9e:	00 00       	nop
     da0:	ee 81       	ldd	r30, Y+6	; 0x06
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	20 a1       	ldd	r18, Z+32	; 0x20
     da6:	08 84       	ldd	r0, Y+8	; 0x08
     da8:	02 c0       	rjmp	.+4      	; 0xdae <_ZN13Character_LCD4InitEv+0x3f8>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <_ZN13Character_LCD4InitEv+0x3f4>
     db2:	80 95       	com	r24
     db4:	82 23       	and	r24, r18
     db6:	80 a3       	std	Z+32, r24	; 0x20
     db8:	8f ec       	ldi	r24, 0xCF	; 207
     dba:	97 e0       	ldi	r25, 0x07	; 7
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <_ZN13Character_LCD4InitEv+0x406>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <_ZN13Character_LCD4InitEv+0x40c>
     dc2:	00 00       	nop
     dc4:	68 e2       	ldi	r22, 0x28	; 40
     dc6:	ce 01       	movw	r24, r28
     dc8:	0e 94 18 03 	call	0x630	; 0x630 <_ZN13Character_LCD11SendCommandEh>
     dcc:	6c e0       	ldi	r22, 0x0C	; 12
     dce:	ce 01       	movw	r24, r28
     dd0:	0e 94 18 03 	call	0x630	; 0x630 <_ZN13Character_LCD11SendCommandEh>
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 92 04 	call	0x924	; 0x924 <_ZN13Character_LCD3ClrEv>
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	64 ea       	ldi	r22, 0xA4	; 164
     de0:	71 e0       	ldi	r23, 0x01	; 1
     de2:	ce 01       	movw	r24, r28
     de4:	0e 94 b1 04 	call	0x962	; 0x962 <_ZN13Character_LCD10CopyStringEPKhhh>
     de8:	9f ef       	ldi	r25, 0xFF	; 255
     dea:	e9 e6       	ldi	r30, 0x69	; 105
     dec:	f8 e1       	ldi	r31, 0x18	; 24
     dee:	91 50       	subi	r25, 0x01	; 1
     df0:	e0 40       	sbci	r30, 0x00	; 0
     df2:	f0 40       	sbci	r31, 0x00	; 0
     df4:	e1 f7       	brne	.-8      	; 0xdee <_ZN13Character_LCD4InitEv+0x438>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <_ZN13Character_LCD4InitEv+0x442>
     df8:	00 00       	nop
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <_ZN13Character_LCD6NumberEhmh>:
void Character_LCD :: Number(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigits)
{
     e00:	2f 92       	push	r2
     e02:	3f 92       	push	r3
     e04:	4f 92       	push	r4
     e06:	5f 92       	push	r5
     e08:	6f 92       	push	r6
     e0a:	7f 92       	push	r7
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	2a 97       	sbiw	r28, 0x0a	; 10
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	5c 01       	movw	r10, r24
     e36:	66 2e       	mov	r6, r22
     e38:	69 01       	movw	r12, r18
     e3a:	7a 01       	movw	r14, r20
    uint8_t i=0,a[10];

    if(2u == v_numericSystem_u8)
     e3c:	22 e0       	ldi	r18, 0x02	; 2
     e3e:	62 13       	cpse	r22, r18
     e40:	26 c0       	rjmp	.+76     	; 0xe8e <_ZN13Character_LCD6NumberEhmh+0x8e>
    {
        while(v_numOfDigits!=0)
     e42:	00 23       	and	r16, r16
     e44:	09 f4       	brne	.+2      	; 0xe48 <_ZN13Character_LCD6NumberEhmh+0x48>
     e46:	76 c0       	rjmp	.+236    	; 0xf34 <_ZN13Character_LCD6NumberEhmh+0x134>
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and transmit */
            i = _AS_GetBitStatus(v_number_u32,(v_numOfDigits-1));
            SendChar(_AS_Dec2Ascii(i));
     e48:	88 24       	eor	r8, r8
     e4a:	83 94       	inc	r8
     e4c:	91 2c       	mov	r9, r1
     e4e:	11 e0       	ldi	r17, 0x01	; 1
     e50:	71 2c       	mov	r7, r1
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	80 0f       	add	r24, r16
     e56:	f4 01       	movw	r30, r8
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <_ZN13Character_LCD6NumberEhmh+0x5e>
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	8a 95       	dec	r24
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <_ZN13Character_LCD6NumberEhmh+0x5a>
     e62:	cf 01       	movw	r24, r30
     e64:	09 2e       	mov	r0, r25
     e66:	00 0c       	add	r0, r0
     e68:	aa 0b       	sbc	r26, r26
     e6a:	bb 0b       	sbc	r27, r27
     e6c:	8c 21       	and	r24, r12
     e6e:	9d 21       	and	r25, r13
     e70:	ae 21       	and	r26, r14
     e72:	bf 21       	and	r27, r15
     e74:	61 2f       	mov	r22, r17
     e76:	89 2b       	or	r24, r25
     e78:	8a 2b       	or	r24, r26
     e7a:	8b 2b       	or	r24, r27
     e7c:	09 f4       	brne	.+2      	; 0xe80 <_ZN13Character_LCD6NumberEhmh+0x80>
     e7e:	67 2d       	mov	r22, r7
     e80:	60 5d       	subi	r22, 0xD0	; 208
     e82:	c5 01       	movw	r24, r10
     e84:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
            v_numOfDigits--;
     e88:	01 50       	subi	r16, 0x01	; 1
{
    uint8_t i=0,a[10];

    if(2u == v_numericSystem_u8)
    {
        while(v_numOfDigits!=0)
     e8a:	19 f7       	brne	.-58     	; 0xe52 <_ZN13Character_LCD6NumberEhmh+0x52>
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <_ZN13Character_LCD6NumberEhmh+0x134>
            i = _AS_GetBitStatus(v_number_u32,(v_numOfDigits-1));
            SendChar(_AS_Dec2Ascii(i));
            v_numOfDigits--;
        }    
    }     
    else if(v_number_u32==0)
     e8e:	c1 14       	cp	r12, r1
     e90:	d1 04       	cpc	r13, r1
     e92:	e1 04       	cpc	r14, r1
     e94:	f1 04       	cpc	r15, r1
     e96:	19 f0       	breq	.+6      	; 0xe9e <_ZN13Character_LCD6NumberEhmh+0x9e>
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
            SendChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigits;i++)
     e98:	01 11       	cpse	r16, r1
     e9a:	11 c0       	rjmp	.+34     	; 0xebe <_ZN13Character_LCD6NumberEhmh+0xbe>
     e9c:	4b c0       	rjmp	.+150    	; 0xf34 <_ZN13Character_LCD6NumberEhmh+0x134>
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
     e9e:	00 23       	and	r16, r16
     ea0:	09 f4       	brne	.+2      	; 0xea4 <_ZN13Character_LCD6NumberEhmh+0xa4>
     ea2:	48 c0       	rjmp	.+144    	; 0xf34 <_ZN13Character_LCD6NumberEhmh+0x134>
     ea4:	10 e0       	ldi	r17, 0x00	; 0
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <_ZN13Character_LCD6NumberEhmh+0xae>
     ea8:	1a 30       	cpi	r17, 0x0A	; 10
     eaa:	09 f4       	brne	.+2      	; 0xeae <_ZN13Character_LCD6NumberEhmh+0xae>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <_ZN13Character_LCD6NumberEhmh+0x134>
            SendChar('0');
     eae:	60 e3       	ldi	r22, 0x30	; 48
     eb0:	c5 01       	movw	r24, r10
     eb2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
     eb6:	1f 5f       	subi	r17, 0xFF	; 255
     eb8:	01 13       	cpse	r16, r17
     eba:	f6 cf       	rjmp	.-20     	; 0xea8 <_ZN13Character_LCD6NumberEhmh+0xa8>
     ebc:	3b c0       	rjmp	.+118    	; 0xf34 <_ZN13Character_LCD6NumberEhmh+0x134>
     ebe:	9e 01       	movw	r18, r28
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	49 01       	movw	r8, r18
            SendChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigits;i++)
     ec6:	10 e0       	ldi	r17, 0x00	; 0
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=_AS_GetMod32(v_number_u32,v_numericSystem_u8);
     ec8:	26 2e       	mov	r2, r22
     eca:	31 2c       	mov	r3, r1
     ecc:	41 2c       	mov	r4, r1
     ece:	51 2c       	mov	r5, r1
    {
        for(i=0;i<v_numOfDigits;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified v_numOfDigitsToTransmit_u8 */
            if(v_number_u32!=0)
     ed0:	c1 14       	cp	r12, r1
     ed2:	d1 04       	cpc	r13, r1
     ed4:	e1 04       	cpc	r14, r1
     ed6:	f1 04       	cpc	r15, r1
     ed8:	89 f0       	breq	.+34     	; 0xefc <_ZN13Character_LCD6NumberEhmh+0xfc>
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=_AS_GetMod32(v_number_u32,v_numericSystem_u8);
     eda:	7c 2c       	mov	r7, r12
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	a2 01       	movw	r20, r4
     ee2:	91 01       	movw	r18, r2
     ee4:	0e 94 43 0b 	call	0x1686	; 0x1686 <__udivmodsi4>
     ee8:	c2 2e       	mov	r12, r18
     eea:	d3 2e       	mov	r13, r19
     eec:	e4 2e       	mov	r14, r20
     eee:	f5 2e       	mov	r15, r21
     ef0:	62 9e       	mul	r6, r18
     ef2:	70 18       	sub	r7, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	f4 01       	movw	r30, r8
     ef8:	70 82       	st	Z, r7
     efa:	08 c0       	rjmp	.+16     	; 0xf0c <_ZN13Character_LCD6NumberEhmh+0x10c>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigits == 0xffu) ||
     efc:	0b 30       	cpi	r16, 0x0B	; 11
     efe:	20 f0       	brcs	.+8      	; 0xf08 <_ZN13Character_LCD6NumberEhmh+0x108>
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
     f00:	11 23       	and	r17, r17
     f02:	c1 f0       	breq	.+48     	; 0xf34 <_ZN13Character_LCD6NumberEhmh+0x134>
     f04:	01 2f       	mov	r16, r17
     f06:	08 c0       	rjmp	.+16     	; 0xf18 <_ZN13Character_LCD6NumberEhmh+0x118>
            else
            {
                /*In case user expects more digits to be transmitted than the actual digits in number,
                  then update the remaining digits with zero.
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
     f08:	f4 01       	movw	r30, r8
     f0a:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
            SendChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigits;i++)
     f0c:	1f 5f       	subi	r17, 0xFF	; 255
     f0e:	ff ef       	ldi	r31, 0xFF	; 255
     f10:	8f 1a       	sub	r8, r31
     f12:	9f 0a       	sbc	r9, r31
     f14:	01 13       	cpse	r16, r17
     f16:	dc cf       	rjmp	.-72     	; 0xed0 <_ZN13Character_LCD6NumberEhmh+0xd0>
        }

        while(i)
        { 
            /* Finally get the ascii values of the digits and transmit*/
            SendChar(_AS_Hex2Ascii(a[i-1]));
     f18:	fe 01       	movw	r30, r28
     f1a:	e0 0f       	add	r30, r16
     f1c:	f1 1d       	adc	r31, r1
     f1e:	60 81       	ld	r22, Z
     f20:	6a 30       	cpi	r22, 0x0A	; 10
     f22:	10 f0       	brcs	.+4      	; 0xf28 <_ZN13Character_LCD6NumberEhmh+0x128>
     f24:	69 5c       	subi	r22, 0xC9	; 201
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <_ZN13Character_LCD6NumberEhmh+0x12a>
     f28:	60 5d       	subi	r22, 0xD0	; 208
     f2a:	c5 01       	movw	r24, r10
     f2c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
            i--;
     f30:	01 50       	subi	r16, 0x01	; 1
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
     f32:	91 f7       	brne	.-28     	; 0xf18 <_ZN13Character_LCD6NumberEhmh+0x118>
            i--;
        }
    }


}
     f34:	2a 96       	adiw	r28, 0x0a	; 10
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	9f 90       	pop	r9
     f56:	8f 90       	pop	r8
     f58:	7f 90       	pop	r7
     f5a:	6f 90       	pop	r6
     f5c:	5f 90       	pop	r5
     f5e:	4f 90       	pop	r4
     f60:	3f 90       	pop	r3
     f62:	2f 90       	pop	r2
     f64:	08 95       	ret

00000f66 <_ZN13Character_LCD11FloatNumberEf>:
void Character_LCD :: FloatNumber(float v_floatNumber_f32)
{
     f66:	8f 92       	push	r8
     f68:	9f 92       	push	r9
     f6a:	af 92       	push	r10
     f6c:	bf 92       	push	r11
     f6e:	cf 92       	push	r12
     f70:	df 92       	push	r13
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	ec 01       	movw	r28, r24
     f7e:	6a 01       	movw	r12, r20
     f80:	7b 01       	movw	r14, r22
      1.Type cast the number to int to get the integer part.
	  2.transmit the extracted integer part followed by a decimal point(.).
	  3.Later the integer part is made zero by subtracting with the extracted integer value.
	  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

	v_tempNumber_u32 = (uint32_t) v_floatNumber_f32;
     f82:	cb 01       	movw	r24, r22
     f84:	ba 01       	movw	r22, r20
     f86:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     f8a:	4b 01       	movw	r8, r22
     f8c:	5c 01       	movw	r10, r24
	Number(10u,v_tempNumber_u32,0xffu);
     f8e:	0f ef       	ldi	r16, 0xFF	; 255
     f90:	9b 01       	movw	r18, r22
     f92:	ac 01       	movw	r20, r24
     f94:	6a e0       	ldi	r22, 0x0A	; 10
     f96:	ce 01       	movw	r24, r28
     f98:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>

	SendChar('.');
     f9c:	6e e2       	ldi	r22, 0x2E	; 46
     f9e:	ce 01       	movw	r24, r28
     fa0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>

	v_floatNumber_f32 = v_floatNumber_f32 - v_tempNumber_u32;
	v_tempNumber_u32 = v_floatNumber_f32 * 1000000;
     fa4:	c5 01       	movw	r24, r10
     fa6:	b4 01       	movw	r22, r8
     fa8:	0e 94 48 0a 	call	0x1490	; 0x1490 <__floatunsisf>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	0e 94 ac 09 	call	0x1358	; 0x1358 <__subsf3>
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	34 e2       	ldi	r19, 0x24	; 36
     fbc:	44 e7       	ldi	r20, 0x74	; 116
     fbe:	59 e4       	ldi	r21, 0x49	; 73
     fc0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
	Number(10u,v_tempNumber_u32,0xffu);
     fc4:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	6a e0       	ldi	r22, 0x0A	; 10
     fce:	ce 01       	movw	r24, r28
     fd0:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	bf 90       	pop	r11
     fe4:	af 90       	pop	r10
     fe6:	9f 90       	pop	r9
     fe8:	8f 90       	pop	r8
     fea:	08 95       	ret

00000fec <_ZN13Character_LCD6PrintfEPKchhz>:
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t v_Num_u8;
		LCD1.Printf("num1:%u",(uint16_t)v_Num_u8); 		 
***************************************************************************************************/
void Character_LCD :: Printf(const char *argList , uint8_t x, uint8_t y , ... )
{
     fec:	3f 92       	push	r3
     fee:	4f 92       	push	r4
     ff0:	5f 92       	push	r5
     ff2:	6f 92       	push	r6
     ff4:	7f 92       	push	r7
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	ec 88       	ldd	r14, Y+20	; 0x14
    1014:	fd 88       	ldd	r15, Y+21	; 0x15
    1016:	0e 89       	ldd	r16, Y+22	; 0x16
    1018:	1f 89       	ldd	r17, Y+23	; 0x17
	GotoXY(x,y);
    101a:	49 8d       	ldd	r20, Y+25	; 0x19
    101c:	68 8d       	ldd	r22, Y+24	; 0x18
    101e:	c7 01       	movw	r24, r14
    1020:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN13Character_LCD6GotoXYEhh>

	double v_floatNum_f32;
	


	va_start(argp, argList);
    1024:	5e 01       	movw	r10, r28
    1026:	8a e1       	ldi	r24, 0x1A	; 26
    1028:	a8 0e       	add	r10, r24
    102a:	b1 1c       	adc	r11, r1

	// Loop through the list to extract all the input arguments 
	for(ptr = argList; *ptr != '\0'; ptr++)
    102c:	d8 01       	movw	r26, r16
    102e:	6c 91       	ld	r22, X
    1030:	66 23       	and	r22, r22
    1032:	09 f4       	brne	.+2      	; 0x1036 <_ZN13Character_LCD6PrintfEPKchhz+0x4a>
    1034:	09 c1       	rjmp	.+530    	; 0x1248 <_ZN13Character_LCD6PrintfEPKchhz+0x25c>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    1036:	88 24       	eor	r8, r8
    1038:	8a 94       	dec	r8
			
			case 'b':  // Argument type is of binary,Read int and convert to binary 
				v_num_u16 = va_arg(argp, uint16_t);		
				
				if(v_numOfDigits >= 8)
				   v_numOfDigits = 8;
    103a:	68 94       	set
    103c:	33 24       	eor	r3, r3
    103e:	33 f8       	bld	r3, 3
		ch= *ptr;
		if(ch == '%')         //Check for '%' as there will be format specifier after it 
		{
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
    1040:	91 2c       	mov	r9, r1
	// Loop through the list to extract all the input arguments 
	for(ptr = argList; *ptr != '\0'; ptr++)
	{

		ch= *ptr;
		if(ch == '%')         //Check for '%' as there will be format specifier after it 
    1042:	65 32       	cpi	r22, 0x25	; 37
    1044:	09 f0       	breq	.+2      	; 0x1048 <_ZN13Character_LCD6PrintfEPKchhz+0x5c>
    1046:	de c0       	rjmp	.+444    	; 0x1204 <_ZN13Character_LCD6PrintfEPKchhz+0x218>
		{
		    ptr++;
    1048:	68 01       	movw	r12, r16
    104a:	bf ef       	ldi	r27, 0xFF	; 255
    104c:	cb 1a       	sub	r12, r27
    104e:	db 0a       	sbc	r13, r27
		    ch = *ptr;
    1050:	d8 01       	movw	r26, r16
    1052:	11 96       	adiw	r26, 0x01	; 1
    1054:	ec 91       	ld	r30, X
    1056:	11 97       	sbiw	r26, 0x01	; 1
		   if((ch>=0x30) && (ch<=0x39))
    1058:	80 ed       	ldi	r24, 0xD0	; 208
    105a:	8e 0f       	add	r24, r30
    105c:	8a 30       	cpi	r24, 0x0A	; 10
    105e:	08 f0       	brcs	.+2      	; 0x1062 <_ZN13Character_LCD6PrintfEPKchhz+0x76>
    1060:	e8 c0       	rjmp	.+464    	; 0x1232 <_ZN13Character_LCD6PrintfEPKchhz+0x246>
    1062:	12 96       	adiw	r26, 0x02	; 2
    1064:	09 2d       	mov	r16, r9
    1066:	00 0f       	add	r16, r16
    1068:	80 2f       	mov	r24, r16
    106a:	88 0f       	add	r24, r24
    106c:	88 0f       	add	r24, r24
    106e:	08 0f       	add	r16, r24
    1070:	00 53       	subi	r16, 0x30	; 48
			{
			   v_numOfDigits = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   v_numOfDigits = (v_numOfDigits * 10) + (ch-0x30);
    1072:	0e 0f       	add	r16, r30
				   ptr++;
    1074:	6d 01       	movw	r12, r26
				   ch = *ptr;
    1076:	ed 91       	ld	r30, X+
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
			{
			   v_numOfDigits = 0;
			   while((ch>=0x30) && (ch<=0x39))
    1078:	80 ed       	ldi	r24, 0xD0	; 208
    107a:	8e 0f       	add	r24, r30
    107c:	8a 30       	cpi	r24, 0x0A	; 10
    107e:	98 f3       	brcs	.-26     	; 0x1066 <_ZN13Character_LCD6PrintfEPKchhz+0x7a>
			{
			  v_numOfDigits = 0xffu;
			}				


			switch(ch)       // Decode the type of the argument 
    1080:	8e 2f       	mov	r24, r30
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	fc 01       	movw	r30, r24
    1086:	b5 97       	sbiw	r30, 0x25	; 37
    1088:	e4 35       	cpi	r30, 0x54	; 84
    108a:	f1 05       	cpc	r31, r1
    108c:	08 f0       	brcs	.+2      	; 0x1090 <_ZN13Character_LCD6PrintfEPKchhz+0xa4>
    108e:	be c0       	rjmp	.+380    	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
    1090:	e6 5d       	subi	r30, 0xD6	; 214
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__tablejump2__>
			{
			case 'C':
			case 'c':     // Argument type is of char, hence read char data from the argp 
				ch = va_arg(argp, int);
    1098:	85 01       	movw	r16, r10
    109a:	0e 5f       	subi	r16, 0xFE	; 254
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
				SendChar(ch);
    109e:	f5 01       	movw	r30, r10
    10a0:	60 81       	ld	r22, Z
    10a2:	c7 01       	movw	r24, r14
    10a4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>

			switch(ch)       // Decode the type of the argument 
			{
			case 'C':
			case 'c':     // Argument type is of char, hence read char data from the argp 
				ch = va_arg(argp, int);
    10a8:	58 01       	movw	r10, r16
				SendChar(ch);
				break;
    10aa:	b0 c0       	rjmp	.+352    	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    10ac:	08 2d       	mov	r16, r8
				ch = va_arg(argp, int);
				SendChar(ch);
				break;

			case 'd':    // Argument type is of signed integer, hence read 16bit data from the argp 
				v_num_s16 = va_arg(argp, signed int);
    10ae:	f5 01       	movw	r30, r10
    10b0:	60 80       	ld	r6, Z
    10b2:	71 80       	ldd	r7, Z+1	; 0x01
    10b4:	f2 e0       	ldi	r31, 0x02	; 2
    10b6:	af 0e       	add	r10, r31
    10b8:	b1 1c       	adc	r11, r1
				if(v_num_s16<0)
    10ba:	77 20       	and	r7, r7
    10bc:	3c f4       	brge	.+14     	; 0x10cc <_ZN13Character_LCD6PrintfEPKchhz+0xe0>
				 { // If the number is -ve then display the 2's complement along with '-' sign  
				   v_num_s16 = -v_num_s16;
    10be:	71 94       	neg	r7
    10c0:	61 94       	neg	r6
    10c2:	71 08       	sbc	r7, r1
				   SendChar('-');
    10c4:	6d e2       	ldi	r22, 0x2D	; 45
    10c6:	c7 01       	movw	r24, r14
    10c8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
				 }
				Number(10u,v_num_s16,v_numOfDigits);
    10cc:	93 01       	movw	r18, r6
    10ce:	77 0c       	add	r7, r7
    10d0:	44 0b       	sbc	r20, r20
    10d2:	55 0b       	sbc	r21, r21
    10d4:	6a e0       	ldi	r22, 0x0A	; 10
    10d6:	c7 01       	movw	r24, r14
    10d8:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>
				break;
    10dc:	97 c0       	rjmp	.+302    	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    10de:	08 2d       	mov	r16, r8
				 }
				Number(10u,v_num_s16,v_numOfDigits);
				break;
				
			case 'D':    // Argument type is of integer, hence read 16bit data from the argp 
				v_num_s32 = va_arg(argp, signed long int);				
    10e0:	f5 01       	movw	r30, r10
    10e2:	40 80       	ld	r4, Z
    10e4:	51 80       	ldd	r5, Z+1	; 0x01
    10e6:	62 80       	ldd	r6, Z+2	; 0x02
    10e8:	73 80       	ldd	r7, Z+3	; 0x03
    10ea:	84 e0       	ldi	r24, 0x04	; 4
    10ec:	a8 0e       	add	r10, r24
    10ee:	b1 1c       	adc	r11, r1
				if(v_num_s32<0)
    10f0:	77 20       	and	r7, r7
    10f2:	64 f4       	brge	.+24     	; 0x110c <_ZN13Character_LCD6PrintfEPKchhz+0x120>
				 { // If the number is -ve then display the 2's complement along with '-' sign 
				   v_num_s32 = -v_num_s32;
    10f4:	70 94       	com	r7
    10f6:	60 94       	com	r6
    10f8:	50 94       	com	r5
    10fa:	40 94       	com	r4
    10fc:	41 1c       	adc	r4, r1
    10fe:	51 1c       	adc	r5, r1
    1100:	61 1c       	adc	r6, r1
    1102:	71 1c       	adc	r7, r1
				   SendChar('-');
    1104:	6d e2       	ldi	r22, 0x2D	; 45
    1106:	c7 01       	movw	r24, r14
    1108:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
				 }
				Number(10u,v_num_s32,v_numOfDigits);			
    110c:	a3 01       	movw	r20, r6
    110e:	92 01       	movw	r18, r4
    1110:	6a e0       	ldi	r22, 0x0A	; 10
    1112:	c7 01       	movw	r24, r14
    1114:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>
				break;	
    1118:	79 c0       	rjmp	.+242    	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    111a:	08 2d       	mov	r16, r8
				 }
				Number(10u,v_num_s32,v_numOfDigits);			
				break;	

			case 'u':    // Argument type is of unsigned integer, hence read 16bit unsigned data 
				v_num_u16 = va_arg(argp, uint16_t);			
    111c:	f5 01       	movw	r30, r10
				Number(10u,v_num_u16,v_numOfDigits);				
    111e:	20 81       	ld	r18, Z
    1120:	31 81       	ldd	r19, Z+1	; 0x01
    1122:	a2 e0       	ldi	r26, 0x02	; 2
    1124:	aa 0e       	add	r10, r26
    1126:	b1 1c       	adc	r11, r1
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	6a e0       	ldi	r22, 0x0A	; 10
    112e:	c7 01       	movw	r24, r14
    1130:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>
				break;
    1134:	6b c0       	rjmp	.+214    	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    1136:	08 2d       	mov	r16, r8
				v_num_u16 = va_arg(argp, uint16_t);			
				Number(10u,v_num_u16,v_numOfDigits);				
				break;
			
			case 'U':    // Argument type is of integer, hence read 32bit unsigend data 
				v_num_u32 = va_arg(argp, uint32_t);			
    1138:	f5 01       	movw	r30, r10
				Number(10u,v_num_u32,v_numOfDigits);				
    113a:	20 81       	ld	r18, Z
    113c:	31 81       	ldd	r19, Z+1	; 0x01
    113e:	42 81       	ldd	r20, Z+2	; 0x02
    1140:	53 81       	ldd	r21, Z+3	; 0x03
    1142:	b4 e0       	ldi	r27, 0x04	; 4
    1144:	ab 0e       	add	r10, r27
    1146:	b1 1c       	adc	r11, r1
    1148:	6a e0       	ldi	r22, 0x0A	; 10
    114a:	c7 01       	movw	r24, r14
    114c:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>
				break;			
    1150:	5d c0       	rjmp	.+186    	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    1152:	08 2d       	mov	r16, r8
				v_num_u32 = va_arg(argp, uint32_t);			
				Number(10u,v_num_u32,v_numOfDigits);				
				break;			

			case 'x':  // Argument type is of hex, hence hexadecimal data from the argp 
				v_num_u16 = va_arg(argp, uint16_t);				
    1154:	f5 01       	movw	r30, r10
				Number(16u,v_num_u16,v_numOfDigits);			
    1156:	20 81       	ld	r18, Z
    1158:	31 81       	ldd	r19, Z+1	; 0x01
    115a:	e2 e0       	ldi	r30, 0x02	; 2
    115c:	ae 0e       	add	r10, r30
    115e:	b1 1c       	adc	r11, r1
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	60 e1       	ldi	r22, 0x10	; 16
    1166:	c7 01       	movw	r24, r14
    1168:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>
				break;
    116c:	4f c0       	rjmp	.+158    	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    116e:	08 2d       	mov	r16, r8
				v_num_u16 = va_arg(argp, uint16_t);				
				Number(16u,v_num_u16,v_numOfDigits);			
				break;

			case 'X':  // Argument type is of hex, hence hexadecimal data from the argp 
				v_num_u32 = va_arg(argp, uint32_t);						
    1170:	f5 01       	movw	r30, r10
				Number(16u,v_num_u32,v_numOfDigits);				
    1172:	20 81       	ld	r18, Z
    1174:	31 81       	ldd	r19, Z+1	; 0x01
    1176:	42 81       	ldd	r20, Z+2	; 0x02
    1178:	53 81       	ldd	r21, Z+3	; 0x03
    117a:	f4 e0       	ldi	r31, 0x04	; 4
    117c:	af 0e       	add	r10, r31
    117e:	b1 1c       	adc	r11, r1
    1180:	60 e1       	ldi	r22, 0x10	; 16
    1182:	c7 01       	movw	r24, r14
    1184:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>
				break;
    1188:	41 c0       	rjmp	.+130    	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    118a:	08 2d       	mov	r16, r8
				Number(16u,v_num_u32,v_numOfDigits);				
				break;

			
			case 'b':  // Argument type is of binary,Read int and convert to binary 
				v_num_u16 = va_arg(argp, uint16_t);		
    118c:	f5 01       	movw	r30, r10
    118e:	20 81       	ld	r18, Z
    1190:	31 81       	ldd	r19, Z+1	; 0x01
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	a8 0e       	add	r10, r24
    1196:	b1 1c       	adc	r11, r1
				
				if(v_numOfDigits >= 8)
    1198:	08 30       	cpi	r16, 0x08	; 8
    119a:	08 f0       	brcs	.+2      	; 0x119e <_ZN13Character_LCD6PrintfEPKchhz+0x1b2>
				   v_numOfDigits = 8;
    119c:	03 2d       	mov	r16, r3
               
				Number(2u,v_num_u16,v_numOfDigits);			
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	62 e0       	ldi	r22, 0x02	; 2
    11a4:	c7 01       	movw	r24, r14
    11a6:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>
				break;
    11aa:	30 c0       	rjmp	.+96     	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>

			case 'B':  // Argument type is of binary,Read int and convert to binary 
				v_num_u32 = va_arg(argp, uint32_t);			
    11ac:	f5 01       	movw	r30, r10
    11ae:	20 81       	ld	r18, Z
    11b0:	31 81       	ldd	r19, Z+1	; 0x01
    11b2:	42 81       	ldd	r20, Z+2	; 0x02
    11b4:	53 81       	ldd	r21, Z+3	; 0x03
    11b6:	a4 e0       	ldi	r26, 0x04	; 4
    11b8:	aa 0e       	add	r10, r26
    11ba:	b1 1c       	adc	r11, r1
                
				if(v_numOfDigits == 0xffu)
    11bc:	0f 3f       	cpi	r16, 0xFF	; 255
    11be:	09 f4       	brne	.+2      	; 0x11c2 <_ZN13Character_LCD6PrintfEPKchhz+0x1d6>
				   v_numOfDigits = 32;		
    11c0:	00 e2       	ldi	r16, 0x20	; 32
               
				Number(2u,v_num_u32,v_numOfDigits);				
    11c2:	62 e0       	ldi	r22, 0x02	; 2
    11c4:	c7 01       	movw	r24, r14
    11c6:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN13Character_LCD6NumberEhmh>
				break;
    11ca:	20 c0       	rjmp	.+64     	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>


			case 'F':
			case 'f': // Argument type is of float, hence read double data from the argp 
			
				v_floatNum_f32 = va_arg(argp, double);				
    11cc:	f5 01       	movw	r30, r10
				FloatNumber(v_floatNum_f32);
    11ce:	40 81       	ld	r20, Z
    11d0:	51 81       	ldd	r21, Z+1	; 0x01
    11d2:	62 81       	ldd	r22, Z+2	; 0x02
    11d4:	73 81       	ldd	r23, Z+3	; 0x03
    11d6:	b4 e0       	ldi	r27, 0x04	; 4
    11d8:	ab 0e       	add	r10, r27
    11da:	b1 1c       	adc	r11, r1
    11dc:	c7 01       	movw	r24, r14
    11de:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN13Character_LCD11FloatNumberEf>
            
				break;                
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>


			case 'S':
			case 's': // Argument type is of string, hence get the pointer to sting passed 
				str = va_arg(argp, char *);
    11e4:	85 01       	movw	r16, r10
    11e6:	0e 5f       	subi	r16, 0xFE	; 254
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
				SendString(str);			
    11ea:	f5 01       	movw	r30, r10
    11ec:	60 81       	ld	r22, Z
    11ee:	71 81       	ldd	r23, Z+1	; 0x01
    11f0:	c7 01       	movw	r24, r14
    11f2:	0e 94 03 03 	call	0x606	; 0x606 <_ZN13Character_LCD10SendStringEPc>
				break;                


			case 'S':
			case 's': // Argument type is of string, hence get the pointer to sting passed 
				str = va_arg(argp, char *);
    11f6:	58 01       	movw	r10, r16
				SendString(str);			
				break;
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>

			case '%':
				SendChar('%');
    11fa:	65 e2       	ldi	r22, 0x25	; 37
    11fc:	c7 01       	movw	r24, r14
    11fe:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
				break;
    1202:	04 c0       	rjmp	.+8      	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
			}
		}
		else
		{
			// As '%' is not detected transmit the char passed 
			SendChar(ch);
    1204:	c7 01       	movw	r24, r14
    1206:	0e 94 21 01 	call	0x242	; 0x242 <_ZN13Character_LCD8SendCharEh>
    120a:	68 01       	movw	r12, r16


	va_start(argp, argList);

	// Loop through the list to extract all the input arguments 
	for(ptr = argList; *ptr != '\0'; ptr++)
    120c:	86 01       	movw	r16, r12
    120e:	0f 5f       	subi	r16, 0xFF	; 255
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	d6 01       	movw	r26, r12
    1214:	11 96       	adiw	r26, 0x01	; 1
    1216:	6c 91       	ld	r22, X
    1218:	61 11       	cpse	r22, r1
    121a:	13 cf       	rjmp	.-474    	; 0x1042 <_ZN13Character_LCD6PrintfEPKchhz+0x56>
    121c:	15 c0       	rjmp	.+42     	; 0x1248 <_ZN13Character_LCD6PrintfEPKchhz+0x25c>
               
				Number(2u,v_num_u16,v_numOfDigits);			
				break;

			case 'B':  // Argument type is of binary,Read int and convert to binary 
				v_num_u32 = va_arg(argp, uint32_t);			
    121e:	f5 01       	movw	r30, r10
    1220:	20 81       	ld	r18, Z
    1222:	31 81       	ldd	r19, Z+1	; 0x01
    1224:	42 81       	ldd	r20, Z+2	; 0x02
    1226:	53 81       	ldd	r21, Z+3	; 0x03
    1228:	b4 e0       	ldi	r27, 0x04	; 4
    122a:	ab 0e       	add	r10, r27
    122c:	b1 1c       	adc	r11, r1
                
				if(v_numOfDigits == 0xffu)
				   v_numOfDigits = 32;		
    122e:	00 e2       	ldi	r16, 0x20	; 32
    1230:	c8 cf       	rjmp	.-112    	; 0x11c2 <_ZN13Character_LCD6PrintfEPKchhz+0x1d6>
			{
			  v_numOfDigits = 0xffu;
			}				


			switch(ch)       // Decode the type of the argument 
    1232:	8e 2f       	mov	r24, r30
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	fc 01       	movw	r30, r24
    1238:	b5 97       	sbiw	r30, 0x25	; 37
    123a:	e4 35       	cpi	r30, 0x54	; 84
    123c:	f1 05       	cpc	r31, r1
    123e:	30 f7       	brcc	.-52     	; 0x120c <_ZN13Character_LCD6PrintfEPKchhz+0x220>
    1240:	e2 58       	subi	r30, 0x82	; 130
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__tablejump2__>
			SendChar(ch);
		}
	}

	va_end(argp);
}
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	bf 90       	pop	r11
    125a:	af 90       	pop	r10
    125c:	9f 90       	pop	r9
    125e:	8f 90       	pop	r8
    1260:	7f 90       	pop	r7
    1262:	6f 90       	pop	r6
    1264:	5f 90       	pop	r5
    1266:	4f 90       	pop	r4
    1268:	3f 90       	pop	r3
    126a:	08 95       	ret

0000126c <main>:
	
	


int main(void)
{
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	00 d0       	rcall	.+0      	; 0x1272 <main+0x6>
    1272:	1f 92       	push	r1
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1278:	2f ef       	ldi	r18, 0xFF	; 255
    127a:	80 e7       	ldi	r24, 0x70	; 112
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	21 50       	subi	r18, 0x01	; 1
    1280:	80 40       	sbci	r24, 0x00	; 0
    1282:	90 40       	sbci	r25, 0x00	; 0
    1284:	e1 f7       	brne	.-8      	; 0x127e <main+0x12>
    1286:	00 c0       	rjmp	.+0      	; 0x1288 <main+0x1c>
    1288:	00 00       	nop


	public:
	Character_LCD ();
	
	void SetRSPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { RS_PORT = ADD_PORT ; RS_DDR = ADD_DDR ; RS_Bit = Bit ; }
    128a:	e2 e7       	ldi	r30, 0x72	; 114
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	9b e1       	ldi	r25, 0x1B	; 27
    1290:	90 83       	st	Z, r25
    1292:	8a e1       	ldi	r24, 0x1A	; 26
    1294:	81 83       	std	Z+1, r24	; 0x01
    1296:	12 82       	std	Z+2, r1	; 0x02
	void SetRWPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { RW_PORT = ADD_PORT ; RW_DDR = ADD_DDR ; RW_Bit = Bit ; }
    1298:	93 83       	std	Z+3, r25	; 0x03
    129a:	84 83       	std	Z+4, r24	; 0x04
    129c:	21 e0       	ldi	r18, 0x01	; 1
    129e:	25 83       	std	Z+5, r18	; 0x05
	void SetEPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { E_PORT = ADD_PORT ; E_DDR = ADD_DDR ; E_Bit = Bit ; }
    12a0:	96 83       	std	Z+6, r25	; 0x06
    12a2:	87 83       	std	Z+7, r24	; 0x07
    12a4:	27 e0       	ldi	r18, 0x07	; 7
    12a6:	20 87       	std	Z+8, r18	; 0x08
	void SetD4Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D4_PORT = ADD_PORT ; D4_DDR = ADD_DDR ; D4_Bit = Bit ; }
    12a8:	91 87       	std	Z+9, r25	; 0x09
    12aa:	82 87       	std	Z+10, r24	; 0x0a
    12ac:	23 e0       	ldi	r18, 0x03	; 3
    12ae:	23 87       	std	Z+11, r18	; 0x0b
	void SetD5Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D5_PORT = ADD_PORT ; D5_DDR = ADD_DDR ; D5_Bit = Bit ; }
    12b0:	94 87       	std	Z+12, r25	; 0x0c
    12b2:	85 87       	std	Z+13, r24	; 0x0d
    12b4:	24 e0       	ldi	r18, 0x04	; 4
    12b6:	26 87       	std	Z+14, r18	; 0x0e
	void SetD6Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D6_PORT = ADD_PORT ; D6_DDR = ADD_DDR ; D6_Bit = Bit ; }
    12b8:	97 87       	std	Z+15, r25	; 0x0f
    12ba:	80 8b       	std	Z+16, r24	; 0x10
    12bc:	25 e0       	ldi	r18, 0x05	; 5
    12be:	21 8b       	std	Z+17, r18	; 0x11
	void SetD7Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D7_PORT = ADD_PORT ; D7_DDR = ADD_DDR ; D7_Bit = Bit ; }
    12c0:	92 8b       	std	Z+18, r25	; 0x12
    12c2:	83 8b       	std	Z+19, r24	; 0x13
    12c4:	86 e0       	ldi	r24, 0x06	; 6
    12c6:	84 8b       	std	Z+20, r24	; 0x14
		LCD1.SetEPin  (ADD(PORTA),ADD(DDRA),7);
		LCD1.SetD4Pin (ADD(PORTA),ADD(DDRA),3);
		LCD1.SetD5Pin (ADD(PORTA),ADD(DDRA),4);
		LCD1.SetD6Pin (ADD(PORTA),ADD(DDRA),5);
		LCD1.SetD7Pin (ADD(PORTA),ADD(DDRA),6);
		LCD1.Init();
    12c8:	cf 01       	movw	r24, r30
    12ca:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_ZN13Character_LCD4InitEv>
	
	
	////////////////////
	const uint8_t LCDwelcome[] PROGMEM="wefwefwef\0";
	char aa =10 ;
	uint8_t a[3] = {90,51,80} ;
    12ce:	8a e5       	ldi	r24, 0x5A	; 90
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	83 e3       	ldi	r24, 0x33	; 51
    12d4:	8a 83       	std	Y+2, r24	; 0x02
    12d6:	80 e5       	ldi	r24, 0x50	; 80
    12d8:	8b 83       	std	Y+3, r24	; 0x03
	while (1)
	{
		LCD1.Clr();
		LCD1.Printf("1001100110011001",0,0,aa);
    12da:	0f 2e       	mov	r0, r31
    12dc:	fa e0       	ldi	r31, 0x0A	; 10
    12de:	ff 2e       	mov	r15, r31
    12e0:	f0 2d       	mov	r31, r0
    12e2:	00 e6       	ldi	r16, 0x60	; 96
    12e4:	10 e0       	ldi	r17, 0x00	; 0
	const uint8_t LCDwelcome[] PROGMEM="wefwefwef\0";
	char aa =10 ;
	uint8_t a[3] = {90,51,80} ;
	while (1)
	{
		LCD1.Clr();
    12e6:	82 e7       	ldi	r24, 0x72	; 114
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 92 04 	call	0x924	; 0x924 <_ZN13Character_LCD3ClrEv>
		LCD1.Printf("1001100110011001",0,0,aa);
    12ee:	1f 92       	push	r1
    12f0:	ff 92       	push	r15
    12f2:	1f 92       	push	r1
    12f4:	1f 92       	push	r1
    12f6:	1f 93       	push	r17
    12f8:	0f 93       	push	r16
    12fa:	82 e7       	ldi	r24, 0x72	; 114
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9f 93       	push	r25
    1300:	8f 93       	push	r24
    1302:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN13Character_LCD6PrintfEPKchhz>
    1306:	2f ef       	ldi	r18, 0xFF	; 255
    1308:	89 e6       	ldi	r24, 0x69	; 105
    130a:	98 e1       	ldi	r25, 0x18	; 24
    130c:	21 50       	subi	r18, 0x01	; 1
    130e:	80 40       	sbci	r24, 0x00	; 0
    1310:	90 40       	sbci	r25, 0x00	; 0
    1312:	e1 f7       	brne	.-8      	; 0x130c <main+0xa0>
    1314:	00 c0       	rjmp	.+0      	; 0x1316 <main+0xaa>
    1316:	00 00       	nop
		 _delay_ms(1000);
		 LCD1.Clr();
    1318:	82 e7       	ldi	r24, 0x72	; 114
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 92 04 	call	0x924	; 0x924 <_ZN13Character_LCD3ClrEv>
		 //LCD1.GotoXY(1,1);LCD1.SendChar(20);
		 LCD1.SendString_V(a,3);
    1320:	43 e0       	ldi	r20, 0x03	; 3
    1322:	be 01       	movw	r22, r28
    1324:	6f 5f       	subi	r22, 0xFF	; 255
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	82 e7       	ldi	r24, 0x72	; 114
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN13Character_LCD12SendString_VEPhh>
    1330:	2f ef       	ldi	r18, 0xFF	; 255
    1332:	89 e6       	ldi	r24, 0x69	; 105
    1334:	98 e1       	ldi	r25, 0x18	; 24
    1336:	21 50       	subi	r18, 0x01	; 1
    1338:	80 40       	sbci	r24, 0x00	; 0
    133a:	90 40       	sbci	r25, 0x00	; 0
    133c:	e1 f7       	brne	.-8      	; 0x1336 <main+0xca>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <main+0xd4>
    1340:	00 00       	nop
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cc cf       	rjmp	.-104    	; 0x12e6 <main+0x7a>

0000134e <_GLOBAL__sub_I__ZN13Character_LCDC2Ev>:

const uint8_t LCDwelcomeln2[] PROGMEM="_LCD_LIB_\0";

const uint8_t LCDwelcomeln3[] PROGMEM=" Loading ... \0";

Character_LCD LCD1;
    134e:	82 e7       	ldi	r24, 0x72	; 114
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 02 01 	call	0x204	; 0x204 <_ZN13Character_LCDC1Ev>
    1356:	08 95       	ret

00001358 <__subsf3>:
    1358:	50 58       	subi	r21, 0x80	; 128

0000135a <__addsf3>:
    135a:	bb 27       	eor	r27, r27
    135c:	aa 27       	eor	r26, r26
    135e:	0e 94 c4 09 	call	0x1388	; 0x1388 <__addsf3x>
    1362:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_round>
    1366:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_pscA>
    136a:	38 f0       	brcs	.+14     	; 0x137a <__addsf3+0x20>
    136c:	0e 94 95 0a 	call	0x152a	; 0x152a <__fp_pscB>
    1370:	20 f0       	brcs	.+8      	; 0x137a <__addsf3+0x20>
    1372:	39 f4       	brne	.+14     	; 0x1382 <__addsf3+0x28>
    1374:	9f 3f       	cpi	r25, 0xFF	; 255
    1376:	19 f4       	brne	.+6      	; 0x137e <__addsf3+0x24>
    1378:	26 f4       	brtc	.+8      	; 0x1382 <__addsf3+0x28>
    137a:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_nan>
    137e:	0e f4       	brtc	.+2      	; 0x1382 <__addsf3+0x28>
    1380:	e0 95       	com	r30
    1382:	e7 fb       	bst	r30, 7
    1384:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_inf>

00001388 <__addsf3x>:
    1388:	e9 2f       	mov	r30, r25
    138a:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_split3>
    138e:	58 f3       	brcs	.-42     	; 0x1366 <__addsf3+0xc>
    1390:	ba 17       	cp	r27, r26
    1392:	62 07       	cpc	r22, r18
    1394:	73 07       	cpc	r23, r19
    1396:	84 07       	cpc	r24, r20
    1398:	95 07       	cpc	r25, r21
    139a:	20 f0       	brcs	.+8      	; 0x13a4 <__addsf3x+0x1c>
    139c:	79 f4       	brne	.+30     	; 0x13bc <__addsf3x+0x34>
    139e:	a6 f5       	brtc	.+104    	; 0x1408 <__addsf3x+0x80>
    13a0:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_zero>
    13a4:	0e f4       	brtc	.+2      	; 0x13a8 <__addsf3x+0x20>
    13a6:	e0 95       	com	r30
    13a8:	0b 2e       	mov	r0, r27
    13aa:	ba 2f       	mov	r27, r26
    13ac:	a0 2d       	mov	r26, r0
    13ae:	0b 01       	movw	r0, r22
    13b0:	b9 01       	movw	r22, r18
    13b2:	90 01       	movw	r18, r0
    13b4:	0c 01       	movw	r0, r24
    13b6:	ca 01       	movw	r24, r20
    13b8:	a0 01       	movw	r20, r0
    13ba:	11 24       	eor	r1, r1
    13bc:	ff 27       	eor	r31, r31
    13be:	59 1b       	sub	r21, r25
    13c0:	99 f0       	breq	.+38     	; 0x13e8 <__addsf3x+0x60>
    13c2:	59 3f       	cpi	r21, 0xF9	; 249
    13c4:	50 f4       	brcc	.+20     	; 0x13da <__addsf3x+0x52>
    13c6:	50 3e       	cpi	r21, 0xE0	; 224
    13c8:	68 f1       	brcs	.+90     	; 0x1424 <__addsf3x+0x9c>
    13ca:	1a 16       	cp	r1, r26
    13cc:	f0 40       	sbci	r31, 0x00	; 0
    13ce:	a2 2f       	mov	r26, r18
    13d0:	23 2f       	mov	r18, r19
    13d2:	34 2f       	mov	r19, r20
    13d4:	44 27       	eor	r20, r20
    13d6:	58 5f       	subi	r21, 0xF8	; 248
    13d8:	f3 cf       	rjmp	.-26     	; 0x13c0 <__addsf3x+0x38>
    13da:	46 95       	lsr	r20
    13dc:	37 95       	ror	r19
    13de:	27 95       	ror	r18
    13e0:	a7 95       	ror	r26
    13e2:	f0 40       	sbci	r31, 0x00	; 0
    13e4:	53 95       	inc	r21
    13e6:	c9 f7       	brne	.-14     	; 0x13da <__addsf3x+0x52>
    13e8:	7e f4       	brtc	.+30     	; 0x1408 <__addsf3x+0x80>
    13ea:	1f 16       	cp	r1, r31
    13ec:	ba 0b       	sbc	r27, r26
    13ee:	62 0b       	sbc	r22, r18
    13f0:	73 0b       	sbc	r23, r19
    13f2:	84 0b       	sbc	r24, r20
    13f4:	ba f0       	brmi	.+46     	; 0x1424 <__addsf3x+0x9c>
    13f6:	91 50       	subi	r25, 0x01	; 1
    13f8:	a1 f0       	breq	.+40     	; 0x1422 <__addsf3x+0x9a>
    13fa:	ff 0f       	add	r31, r31
    13fc:	bb 1f       	adc	r27, r27
    13fe:	66 1f       	adc	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	c2 f7       	brpl	.-16     	; 0x13f6 <__addsf3x+0x6e>
    1406:	0e c0       	rjmp	.+28     	; 0x1424 <__addsf3x+0x9c>
    1408:	ba 0f       	add	r27, r26
    140a:	62 1f       	adc	r22, r18
    140c:	73 1f       	adc	r23, r19
    140e:	84 1f       	adc	r24, r20
    1410:	48 f4       	brcc	.+18     	; 0x1424 <__addsf3x+0x9c>
    1412:	87 95       	ror	r24
    1414:	77 95       	ror	r23
    1416:	67 95       	ror	r22
    1418:	b7 95       	ror	r27
    141a:	f7 95       	ror	r31
    141c:	9e 3f       	cpi	r25, 0xFE	; 254
    141e:	08 f0       	brcs	.+2      	; 0x1422 <__addsf3x+0x9a>
    1420:	b0 cf       	rjmp	.-160    	; 0x1382 <__addsf3+0x28>
    1422:	93 95       	inc	r25
    1424:	88 0f       	add	r24, r24
    1426:	08 f0       	brcs	.+2      	; 0x142a <__addsf3x+0xa2>
    1428:	99 27       	eor	r25, r25
    142a:	ee 0f       	add	r30, r30
    142c:	97 95       	ror	r25
    142e:	87 95       	ror	r24
    1430:	08 95       	ret

00001432 <__fixunssfsi>:
    1432:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_splitA>
    1436:	88 f0       	brcs	.+34     	; 0x145a <__fixunssfsi+0x28>
    1438:	9f 57       	subi	r25, 0x7F	; 127
    143a:	98 f0       	brcs	.+38     	; 0x1462 <__fixunssfsi+0x30>
    143c:	b9 2f       	mov	r27, r25
    143e:	99 27       	eor	r25, r25
    1440:	b7 51       	subi	r27, 0x17	; 23
    1442:	b0 f0       	brcs	.+44     	; 0x1470 <__fixunssfsi+0x3e>
    1444:	e1 f0       	breq	.+56     	; 0x147e <__fixunssfsi+0x4c>
    1446:	66 0f       	add	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	1a f0       	brmi	.+6      	; 0x1456 <__fixunssfsi+0x24>
    1450:	ba 95       	dec	r27
    1452:	c9 f7       	brne	.-14     	; 0x1446 <__fixunssfsi+0x14>
    1454:	14 c0       	rjmp	.+40     	; 0x147e <__fixunssfsi+0x4c>
    1456:	b1 30       	cpi	r27, 0x01	; 1
    1458:	91 f0       	breq	.+36     	; 0x147e <__fixunssfsi+0x4c>
    145a:	0e 94 cf 0a 	call	0x159e	; 0x159e <__fp_zero>
    145e:	b1 e0       	ldi	r27, 0x01	; 1
    1460:	08 95       	ret
    1462:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_zero>
    1466:	67 2f       	mov	r22, r23
    1468:	78 2f       	mov	r23, r24
    146a:	88 27       	eor	r24, r24
    146c:	b8 5f       	subi	r27, 0xF8	; 248
    146e:	39 f0       	breq	.+14     	; 0x147e <__fixunssfsi+0x4c>
    1470:	b9 3f       	cpi	r27, 0xF9	; 249
    1472:	cc f3       	brlt	.-14     	; 0x1466 <__fixunssfsi+0x34>
    1474:	86 95       	lsr	r24
    1476:	77 95       	ror	r23
    1478:	67 95       	ror	r22
    147a:	b3 95       	inc	r27
    147c:	d9 f7       	brne	.-10     	; 0x1474 <__fixunssfsi+0x42>
    147e:	3e f4       	brtc	.+14     	; 0x148e <__fixunssfsi+0x5c>
    1480:	90 95       	com	r25
    1482:	80 95       	com	r24
    1484:	70 95       	com	r23
    1486:	61 95       	neg	r22
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	8f 4f       	sbci	r24, 0xFF	; 255
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	08 95       	ret

00001490 <__floatunsisf>:
    1490:	e8 94       	clt
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <__floatsisf+0x12>

00001494 <__floatsisf>:
    1494:	97 fb       	bst	r25, 7
    1496:	3e f4       	brtc	.+14     	; 0x14a6 <__floatsisf+0x12>
    1498:	90 95       	com	r25
    149a:	80 95       	com	r24
    149c:	70 95       	com	r23
    149e:	61 95       	neg	r22
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	99 23       	and	r25, r25
    14a8:	a9 f0       	breq	.+42     	; 0x14d4 <__floatsisf+0x40>
    14aa:	f9 2f       	mov	r31, r25
    14ac:	96 e9       	ldi	r25, 0x96	; 150
    14ae:	bb 27       	eor	r27, r27
    14b0:	93 95       	inc	r25
    14b2:	f6 95       	lsr	r31
    14b4:	87 95       	ror	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b7 95       	ror	r27
    14bc:	f1 11       	cpse	r31, r1
    14be:	f8 cf       	rjmp	.-16     	; 0x14b0 <__floatsisf+0x1c>
    14c0:	fa f4       	brpl	.+62     	; 0x1500 <__floatsisf+0x6c>
    14c2:	bb 0f       	add	r27, r27
    14c4:	11 f4       	brne	.+4      	; 0x14ca <__floatsisf+0x36>
    14c6:	60 ff       	sbrs	r22, 0
    14c8:	1b c0       	rjmp	.+54     	; 0x1500 <__floatsisf+0x6c>
    14ca:	6f 5f       	subi	r22, 0xFF	; 255
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	8f 4f       	sbci	r24, 0xFF	; 255
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <__floatsisf+0x6c>
    14d4:	88 23       	and	r24, r24
    14d6:	11 f0       	breq	.+4      	; 0x14dc <__floatsisf+0x48>
    14d8:	96 e9       	ldi	r25, 0x96	; 150
    14da:	11 c0       	rjmp	.+34     	; 0x14fe <__floatsisf+0x6a>
    14dc:	77 23       	and	r23, r23
    14de:	21 f0       	breq	.+8      	; 0x14e8 <__floatsisf+0x54>
    14e0:	9e e8       	ldi	r25, 0x8E	; 142
    14e2:	87 2f       	mov	r24, r23
    14e4:	76 2f       	mov	r23, r22
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <__floatsisf+0x5e>
    14e8:	66 23       	and	r22, r22
    14ea:	71 f0       	breq	.+28     	; 0x1508 <__floatsisf+0x74>
    14ec:	96 e8       	ldi	r25, 0x86	; 134
    14ee:	86 2f       	mov	r24, r22
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	2a f0       	brmi	.+10     	; 0x1500 <__floatsisf+0x6c>
    14f6:	9a 95       	dec	r25
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	88 1f       	adc	r24, r24
    14fe:	da f7       	brpl	.-10     	; 0x14f6 <__floatsisf+0x62>
    1500:	88 0f       	add	r24, r24
    1502:	96 95       	lsr	r25
    1504:	87 95       	ror	r24
    1506:	97 f9       	bld	r25, 7
    1508:	08 95       	ret

0000150a <__fp_inf>:
    150a:	97 f9       	bld	r25, 7
    150c:	9f 67       	ori	r25, 0x7F	; 127
    150e:	80 e8       	ldi	r24, 0x80	; 128
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	08 95       	ret

00001516 <__fp_nan>:
    1516:	9f ef       	ldi	r25, 0xFF	; 255
    1518:	80 ec       	ldi	r24, 0xC0	; 192
    151a:	08 95       	ret

0000151c <__fp_pscA>:
    151c:	00 24       	eor	r0, r0
    151e:	0a 94       	dec	r0
    1520:	16 16       	cp	r1, r22
    1522:	17 06       	cpc	r1, r23
    1524:	18 06       	cpc	r1, r24
    1526:	09 06       	cpc	r0, r25
    1528:	08 95       	ret

0000152a <__fp_pscB>:
    152a:	00 24       	eor	r0, r0
    152c:	0a 94       	dec	r0
    152e:	12 16       	cp	r1, r18
    1530:	13 06       	cpc	r1, r19
    1532:	14 06       	cpc	r1, r20
    1534:	05 06       	cpc	r0, r21
    1536:	08 95       	ret

00001538 <__fp_round>:
    1538:	09 2e       	mov	r0, r25
    153a:	03 94       	inc	r0
    153c:	00 0c       	add	r0, r0
    153e:	11 f4       	brne	.+4      	; 0x1544 <__fp_round+0xc>
    1540:	88 23       	and	r24, r24
    1542:	52 f0       	brmi	.+20     	; 0x1558 <__fp_round+0x20>
    1544:	bb 0f       	add	r27, r27
    1546:	40 f4       	brcc	.+16     	; 0x1558 <__fp_round+0x20>
    1548:	bf 2b       	or	r27, r31
    154a:	11 f4       	brne	.+4      	; 0x1550 <__fp_round+0x18>
    154c:	60 ff       	sbrs	r22, 0
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <__fp_round+0x20>
    1550:	6f 5f       	subi	r22, 0xFF	; 255
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	08 95       	ret

0000155a <__fp_split3>:
    155a:	57 fd       	sbrc	r21, 7
    155c:	90 58       	subi	r25, 0x80	; 128
    155e:	44 0f       	add	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	59 f0       	breq	.+22     	; 0x157a <__fp_splitA+0x10>
    1564:	5f 3f       	cpi	r21, 0xFF	; 255
    1566:	71 f0       	breq	.+28     	; 0x1584 <__fp_splitA+0x1a>
    1568:	47 95       	ror	r20

0000156a <__fp_splitA>:
    156a:	88 0f       	add	r24, r24
    156c:	97 fb       	bst	r25, 7
    156e:	99 1f       	adc	r25, r25
    1570:	61 f0       	breq	.+24     	; 0x158a <__fp_splitA+0x20>
    1572:	9f 3f       	cpi	r25, 0xFF	; 255
    1574:	79 f0       	breq	.+30     	; 0x1594 <__fp_splitA+0x2a>
    1576:	87 95       	ror	r24
    1578:	08 95       	ret
    157a:	12 16       	cp	r1, r18
    157c:	13 06       	cpc	r1, r19
    157e:	14 06       	cpc	r1, r20
    1580:	55 1f       	adc	r21, r21
    1582:	f2 cf       	rjmp	.-28     	; 0x1568 <__fp_split3+0xe>
    1584:	46 95       	lsr	r20
    1586:	f1 df       	rcall	.-30     	; 0x156a <__fp_splitA>
    1588:	08 c0       	rjmp	.+16     	; 0x159a <__fp_splitA+0x30>
    158a:	16 16       	cp	r1, r22
    158c:	17 06       	cpc	r1, r23
    158e:	18 06       	cpc	r1, r24
    1590:	99 1f       	adc	r25, r25
    1592:	f1 cf       	rjmp	.-30     	; 0x1576 <__fp_splitA+0xc>
    1594:	86 95       	lsr	r24
    1596:	71 05       	cpc	r23, r1
    1598:	61 05       	cpc	r22, r1
    159a:	08 94       	sec
    159c:	08 95       	ret

0000159e <__fp_zero>:
    159e:	e8 94       	clt

000015a0 <__fp_szero>:
    15a0:	bb 27       	eor	r27, r27
    15a2:	66 27       	eor	r22, r22
    15a4:	77 27       	eor	r23, r23
    15a6:	cb 01       	movw	r24, r22
    15a8:	97 f9       	bld	r25, 7
    15aa:	08 95       	ret

000015ac <__mulsf3>:
    15ac:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__mulsf3x>
    15b0:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_round>
    15b4:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_pscA>
    15b8:	38 f0       	brcs	.+14     	; 0x15c8 <__mulsf3+0x1c>
    15ba:	0e 94 95 0a 	call	0x152a	; 0x152a <__fp_pscB>
    15be:	20 f0       	brcs	.+8      	; 0x15c8 <__mulsf3+0x1c>
    15c0:	95 23       	and	r25, r21
    15c2:	11 f0       	breq	.+4      	; 0x15c8 <__mulsf3+0x1c>
    15c4:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_inf>
    15c8:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_nan>
    15cc:	11 24       	eor	r1, r1
    15ce:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_szero>

000015d2 <__mulsf3x>:
    15d2:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_split3>
    15d6:	70 f3       	brcs	.-36     	; 0x15b4 <__mulsf3+0x8>

000015d8 <__mulsf3_pse>:
    15d8:	95 9f       	mul	r25, r21
    15da:	c1 f3       	breq	.-16     	; 0x15cc <__mulsf3+0x20>
    15dc:	95 0f       	add	r25, r21
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	55 1f       	adc	r21, r21
    15e2:	62 9f       	mul	r22, r18
    15e4:	f0 01       	movw	r30, r0
    15e6:	72 9f       	mul	r23, r18
    15e8:	bb 27       	eor	r27, r27
    15ea:	f0 0d       	add	r31, r0
    15ec:	b1 1d       	adc	r27, r1
    15ee:	63 9f       	mul	r22, r19
    15f0:	aa 27       	eor	r26, r26
    15f2:	f0 0d       	add	r31, r0
    15f4:	b1 1d       	adc	r27, r1
    15f6:	aa 1f       	adc	r26, r26
    15f8:	64 9f       	mul	r22, r20
    15fa:	66 27       	eor	r22, r22
    15fc:	b0 0d       	add	r27, r0
    15fe:	a1 1d       	adc	r26, r1
    1600:	66 1f       	adc	r22, r22
    1602:	82 9f       	mul	r24, r18
    1604:	22 27       	eor	r18, r18
    1606:	b0 0d       	add	r27, r0
    1608:	a1 1d       	adc	r26, r1
    160a:	62 1f       	adc	r22, r18
    160c:	73 9f       	mul	r23, r19
    160e:	b0 0d       	add	r27, r0
    1610:	a1 1d       	adc	r26, r1
    1612:	62 1f       	adc	r22, r18
    1614:	83 9f       	mul	r24, r19
    1616:	a0 0d       	add	r26, r0
    1618:	61 1d       	adc	r22, r1
    161a:	22 1f       	adc	r18, r18
    161c:	74 9f       	mul	r23, r20
    161e:	33 27       	eor	r19, r19
    1620:	a0 0d       	add	r26, r0
    1622:	61 1d       	adc	r22, r1
    1624:	23 1f       	adc	r18, r19
    1626:	84 9f       	mul	r24, r20
    1628:	60 0d       	add	r22, r0
    162a:	21 1d       	adc	r18, r1
    162c:	82 2f       	mov	r24, r18
    162e:	76 2f       	mov	r23, r22
    1630:	6a 2f       	mov	r22, r26
    1632:	11 24       	eor	r1, r1
    1634:	9f 57       	subi	r25, 0x7F	; 127
    1636:	50 40       	sbci	r21, 0x00	; 0
    1638:	9a f0       	brmi	.+38     	; 0x1660 <__mulsf3_pse+0x88>
    163a:	f1 f0       	breq	.+60     	; 0x1678 <__mulsf3_pse+0xa0>
    163c:	88 23       	and	r24, r24
    163e:	4a f0       	brmi	.+18     	; 0x1652 <__mulsf3_pse+0x7a>
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	bb 1f       	adc	r27, r27
    1646:	66 1f       	adc	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	91 50       	subi	r25, 0x01	; 1
    164e:	50 40       	sbci	r21, 0x00	; 0
    1650:	a9 f7       	brne	.-22     	; 0x163c <__mulsf3_pse+0x64>
    1652:	9e 3f       	cpi	r25, 0xFE	; 254
    1654:	51 05       	cpc	r21, r1
    1656:	80 f0       	brcs	.+32     	; 0x1678 <__mulsf3_pse+0xa0>
    1658:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_inf>
    165c:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_szero>
    1660:	5f 3f       	cpi	r21, 0xFF	; 255
    1662:	e4 f3       	brlt	.-8      	; 0x165c <__mulsf3_pse+0x84>
    1664:	98 3e       	cpi	r25, 0xE8	; 232
    1666:	d4 f3       	brlt	.-12     	; 0x165c <__mulsf3_pse+0x84>
    1668:	86 95       	lsr	r24
    166a:	77 95       	ror	r23
    166c:	67 95       	ror	r22
    166e:	b7 95       	ror	r27
    1670:	f7 95       	ror	r31
    1672:	e7 95       	ror	r30
    1674:	9f 5f       	subi	r25, 0xFF	; 255
    1676:	c1 f7       	brne	.-16     	; 0x1668 <__mulsf3_pse+0x90>
    1678:	fe 2b       	or	r31, r30
    167a:	88 0f       	add	r24, r24
    167c:	91 1d       	adc	r25, r1
    167e:	96 95       	lsr	r25
    1680:	87 95       	ror	r24
    1682:	97 f9       	bld	r25, 7
    1684:	08 95       	ret

00001686 <__udivmodsi4>:
    1686:	a1 e2       	ldi	r26, 0x21	; 33
    1688:	1a 2e       	mov	r1, r26
    168a:	aa 1b       	sub	r26, r26
    168c:	bb 1b       	sub	r27, r27
    168e:	fd 01       	movw	r30, r26
    1690:	0d c0       	rjmp	.+26     	; 0x16ac <__udivmodsi4_ep>

00001692 <__udivmodsi4_loop>:
    1692:	aa 1f       	adc	r26, r26
    1694:	bb 1f       	adc	r27, r27
    1696:	ee 1f       	adc	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	a2 17       	cp	r26, r18
    169c:	b3 07       	cpc	r27, r19
    169e:	e4 07       	cpc	r30, r20
    16a0:	f5 07       	cpc	r31, r21
    16a2:	20 f0       	brcs	.+8      	; 0x16ac <__udivmodsi4_ep>
    16a4:	a2 1b       	sub	r26, r18
    16a6:	b3 0b       	sbc	r27, r19
    16a8:	e4 0b       	sbc	r30, r20
    16aa:	f5 0b       	sbc	r31, r21

000016ac <__udivmodsi4_ep>:
    16ac:	66 1f       	adc	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 1f       	adc	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	1a 94       	dec	r1
    16b6:	69 f7       	brne	.-38     	; 0x1692 <__udivmodsi4_loop>
    16b8:	60 95       	com	r22
    16ba:	70 95       	com	r23
    16bc:	80 95       	com	r24
    16be:	90 95       	com	r25
    16c0:	9b 01       	movw	r18, r22
    16c2:	ac 01       	movw	r20, r24
    16c4:	bd 01       	movw	r22, r26
    16c6:	cf 01       	movw	r24, r30
    16c8:	08 95       	ret

000016ca <__tablejump2__>:
    16ca:	ee 0f       	add	r30, r30
    16cc:	ff 1f       	adc	r31, r31
    16ce:	05 90       	lpm	r0, Z+
    16d0:	f4 91       	lpm	r31, Z
    16d2:	e0 2d       	mov	r30, r0
    16d4:	09 94       	ijmp

000016d6 <_exit>:
    16d6:	f8 94       	cli

000016d8 <__stop_program>:
    16d8:	ff cf       	rjmp	.-2      	; 0x16d8 <__stop_program>
